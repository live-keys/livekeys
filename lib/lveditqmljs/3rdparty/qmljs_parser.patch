
diff -bur ./qmljsast.cpp ../declarative/parser/qmljsast.cpp
--- ./qmljsast.cpp	2018-04-01 19:31:30.442055800 +0300
+++ ../declarative/parser/qmljsast.cpp	2018-03-31 00:00:07.574678700 +0300
@@ -37,13 +37,13 @@
 **
 ****************************************************************************/
 
-#include "qmljsast_p.h"
+#include "qqmljsast_p.h"
 
-#include "qmljsastvisitor_p.h"
+#include "qqmljsastvisitor_p.h"
 
 QT_QML_BEGIN_NAMESPACE
 
-namespace QmlJS { namespace AST {
+namespace QQmlJS { namespace AST {
 
 void Node::accept(Visitor *visitor)
 {
@@ -967,7 +967,7 @@
     visitor->endVisit(this);
 }
 
-} } // namespace QmlJS::AST
+} } // namespace QQmlJS::AST
 
 QT_QML_END_NAMESPACE
 
diff -bur ./qmljsast_p.h ../declarative/parser/qmljsast_p.h
--- ./qmljsast_p.h	2018-04-01 19:23:46.150936700 +0300
+++ ../declarative/parser/qmljsast_p.h	2018-03-31 00:00:07.575679100 +0300
@@ -37,8 +37,8 @@
 **
 ****************************************************************************/
 
-#ifndef QMLJSAST_P_H
-#define QMLJSAST_P_H
+#ifndef QQMLJSAST_P_H
+#define QQMLJSAST_P_H
 
 //
 //  W A R N I N G
@@ -51,15 +51,15 @@
 // We mean it.
 //
 
-#include "qmljsastvisitor_p.h"
-#include "qmljsglobal_p.h"
-#include "qmljsmemorypool_p.h"
+#include "qqmljsastvisitor_p.h"
+#include "qqmljsglobal_p.h"
+#include "qqmljsmemorypool_p.h"
 
 #include <QtCore/qstring.h>
 
 QT_QML_BEGIN_NAMESPACE
 
-#define QMLJS_DECLARE_AST_NODE(name) \
+#define QQMLJS_DECLARE_AST_NODE(name) \
   enum { K = Kind_##name };
 
 namespace QSOperator // ### rename
@@ -105,7 +105,7 @@
 
 } // namespace QSOperator
 
-namespace QmlJS {
+namespace QQmlJS {
 
 namespace AST {
 
@@ -267,7 +267,7 @@
 class QML_PARSER_EXPORT NestedExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(NestedExpression)
+    QQMLJS_DECLARE_AST_NODE(NestedExpression)
 
     NestedExpression(ExpressionNode *expression)
         : expression(expression)
@@ -290,7 +290,7 @@
 class QML_PARSER_EXPORT ThisExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(ThisExpression)
+    QQMLJS_DECLARE_AST_NODE(ThisExpression)
 
     ThisExpression() { kind = K; }
 
@@ -309,7 +309,7 @@
 class QML_PARSER_EXPORT IdentifierExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(IdentifierExpression)
+    QQMLJS_DECLARE_AST_NODE(IdentifierExpression)
 
     IdentifierExpression(const QStringRef &n):
         name (n) { kind = K; }
@@ -330,7 +330,7 @@
 class QML_PARSER_EXPORT NullExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(NullExpression)
+    QQMLJS_DECLARE_AST_NODE(NullExpression)
 
     NullExpression() { kind = K; }
 
@@ -349,7 +349,7 @@
 class QML_PARSER_EXPORT TrueLiteral: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(TrueLiteral)
+    QQMLJS_DECLARE_AST_NODE(TrueLiteral)
 
     TrueLiteral() { kind = K; }
 
@@ -368,7 +368,7 @@
 class QML_PARSER_EXPORT FalseLiteral: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(FalseLiteral)
+    QQMLJS_DECLARE_AST_NODE(FalseLiteral)
 
     FalseLiteral() { kind = K; }
 
@@ -387,7 +387,7 @@
 class QML_PARSER_EXPORT NumericLiteral: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(NumericLiteral)
+    QQMLJS_DECLARE_AST_NODE(NumericLiteral)
 
     NumericLiteral(double v):
         value(v) { kind = K; }
@@ -408,7 +408,7 @@
 class QML_PARSER_EXPORT StringLiteral: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(StringLiteral)
+    QQMLJS_DECLARE_AST_NODE(StringLiteral)
 
     StringLiteral(const QStringRef &v):
         value (v) { kind = K; }
@@ -429,7 +429,7 @@
 class QML_PARSER_EXPORT RegExpLiteral: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(RegExpLiteral)
+    QQMLJS_DECLARE_AST_NODE(RegExpLiteral)
 
     RegExpLiteral(const QStringRef &p, int f):
         pattern (p), flags (f) { kind = K; }
@@ -451,7 +451,7 @@
 class QML_PARSER_EXPORT ArrayLiteral: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(ArrayLiteral)
+    QQMLJS_DECLARE_AST_NODE(ArrayLiteral)
 
     ArrayLiteral(Elision *e):
         elements (0), elision (e)
@@ -484,7 +484,7 @@
 class QML_PARSER_EXPORT ObjectLiteral: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(ObjectLiteral)
+    QQMLJS_DECLARE_AST_NODE(ObjectLiteral)
 
     ObjectLiteral():
         properties (0) { kind = K; }
@@ -509,7 +509,7 @@
 class QML_PARSER_EXPORT Elision: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(Elision)
+    QQMLJS_DECLARE_AST_NODE(Elision)
 
     Elision():
         next (this) { kind = K; }
@@ -544,7 +544,7 @@
 class QML_PARSER_EXPORT ElementList: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(ElementList)
+    QQMLJS_DECLARE_AST_NODE(ElementList)
 
     ElementList(Elision *e, ExpressionNode *expr):
         elision (e), expression (expr), next (this)
@@ -591,7 +591,7 @@
 class QML_PARSER_EXPORT PropertyName: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(PropertyName)
+    QQMLJS_DECLARE_AST_NODE(PropertyName)
 
     PropertyName() { kind = K; }
 
@@ -620,7 +620,7 @@
 class QML_PARSER_EXPORT PropertyAssignmentList: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(PropertyAssignmentList)
+    QQMLJS_DECLARE_AST_NODE(PropertyAssignmentList)
 
     PropertyAssignmentList(PropertyAssignment *assignment)
         : assignment(assignment)
@@ -659,7 +659,7 @@
 class QML_PARSER_EXPORT PropertyNameAndValue: public PropertyAssignment
 {
 public:
-    QMLJS_DECLARE_AST_NODE(PropertyNameAndValue)
+    QQMLJS_DECLARE_AST_NODE(PropertyNameAndValue)
 
     PropertyNameAndValue(PropertyName *n, ExpressionNode *v)
         : PropertyAssignment(n), value(v)
@@ -682,7 +682,7 @@
 class QML_PARSER_EXPORT PropertyGetterSetter: public PropertyAssignment
 {
 public:
-    QMLJS_DECLARE_AST_NODE(PropertyGetterSetter)
+    QQMLJS_DECLARE_AST_NODE(PropertyGetterSetter)
 
     enum Type {
         Getter,
@@ -719,7 +719,7 @@
 class QML_PARSER_EXPORT IdentifierPropertyName: public PropertyName
 {
 public:
-    QMLJS_DECLARE_AST_NODE(IdentifierPropertyName)
+    QQMLJS_DECLARE_AST_NODE(IdentifierPropertyName)
 
     IdentifierPropertyName(const QStringRef &n):
         id (n) { kind = K; }
@@ -735,7 +735,7 @@
 class QML_PARSER_EXPORT StringLiteralPropertyName: public PropertyName
 {
 public:
-    QMLJS_DECLARE_AST_NODE(StringLiteralPropertyName)
+    QQMLJS_DECLARE_AST_NODE(StringLiteralPropertyName)
 
     StringLiteralPropertyName(const QStringRef &n):
         id (n) { kind = K; }
@@ -751,7 +751,7 @@
 class QML_PARSER_EXPORT NumericLiteralPropertyName: public PropertyName
 {
 public:
-    QMLJS_DECLARE_AST_NODE(NumericLiteralPropertyName)
+    QQMLJS_DECLARE_AST_NODE(NumericLiteralPropertyName)
 
     NumericLiteralPropertyName(double n):
         id (n) { kind = K; }
@@ -767,7 +767,7 @@
 class QML_PARSER_EXPORT ArrayMemberExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(ArrayMemberExpression)
+    QQMLJS_DECLARE_AST_NODE(ArrayMemberExpression)
 
     ArrayMemberExpression(ExpressionNode *b, ExpressionNode *e):
         base (b), expression (e)
@@ -791,7 +791,7 @@
 class QML_PARSER_EXPORT FieldMemberExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(FieldMemberExpression)
+    QQMLJS_DECLARE_AST_NODE(FieldMemberExpression)
 
     FieldMemberExpression(ExpressionNode *b, const QStringRef &n):
         base (b), name (n)
@@ -815,7 +815,7 @@
 class QML_PARSER_EXPORT NewMemberExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(NewMemberExpression)
+    QQMLJS_DECLARE_AST_NODE(NewMemberExpression)
 
     NewMemberExpression(ExpressionNode *b, ArgumentList *a):
         base (b), arguments (a)
@@ -840,7 +840,7 @@
 class QML_PARSER_EXPORT NewExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(NewExpression)
+    QQMLJS_DECLARE_AST_NODE(NewExpression)
 
     NewExpression(ExpressionNode *e):
         expression (e) { kind = K; }
@@ -861,7 +861,7 @@
 class QML_PARSER_EXPORT CallExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(CallExpression)
+    QQMLJS_DECLARE_AST_NODE(CallExpression)
 
     CallExpression(ExpressionNode *b, ArgumentList *a):
         base (b), arguments (a)
@@ -885,7 +885,7 @@
 class QML_PARSER_EXPORT ArgumentList: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(ArgumentList)
+    QQMLJS_DECLARE_AST_NODE(ArgumentList)
 
     ArgumentList(ExpressionNode *e):
         expression (e), next (this)
@@ -927,7 +927,7 @@
 class QML_PARSER_EXPORT PostIncrementExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(PostIncrementExpression)
+    QQMLJS_DECLARE_AST_NODE(PostIncrementExpression)
 
     PostIncrementExpression(ExpressionNode *b):
         base (b) { kind = K; }
@@ -948,7 +948,7 @@
 class QML_PARSER_EXPORT PostDecrementExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(PostDecrementExpression)
+    QQMLJS_DECLARE_AST_NODE(PostDecrementExpression)
 
     PostDecrementExpression(ExpressionNode *b):
         base (b) { kind = K; }
@@ -969,7 +969,7 @@
 class QML_PARSER_EXPORT DeleteExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(DeleteExpression)
+    QQMLJS_DECLARE_AST_NODE(DeleteExpression)
 
     DeleteExpression(ExpressionNode *e):
         expression (e) { kind = K; }
@@ -990,7 +990,7 @@
 class QML_PARSER_EXPORT VoidExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(VoidExpression)
+    QQMLJS_DECLARE_AST_NODE(VoidExpression)
 
     VoidExpression(ExpressionNode *e):
         expression (e) { kind = K; }
@@ -1011,7 +1011,7 @@
 class QML_PARSER_EXPORT TypeOfExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(TypeOfExpression)
+    QQMLJS_DECLARE_AST_NODE(TypeOfExpression)
 
     TypeOfExpression(ExpressionNode *e):
         expression (e) { kind = K; }
@@ -1032,7 +1032,7 @@
 class QML_PARSER_EXPORT PreIncrementExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(PreIncrementExpression)
+    QQMLJS_DECLARE_AST_NODE(PreIncrementExpression)
 
     PreIncrementExpression(ExpressionNode *e):
         expression (e) { kind = K; }
@@ -1053,7 +1053,7 @@
 class QML_PARSER_EXPORT PreDecrementExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(PreDecrementExpression)
+    QQMLJS_DECLARE_AST_NODE(PreDecrementExpression)
 
     PreDecrementExpression(ExpressionNode *e):
         expression (e) { kind = K; }
@@ -1074,7 +1074,7 @@
 class QML_PARSER_EXPORT UnaryPlusExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UnaryPlusExpression)
+    QQMLJS_DECLARE_AST_NODE(UnaryPlusExpression)
 
     UnaryPlusExpression(ExpressionNode *e):
         expression (e) { kind = K; }
@@ -1095,7 +1095,7 @@
 class QML_PARSER_EXPORT UnaryMinusExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UnaryMinusExpression)
+    QQMLJS_DECLARE_AST_NODE(UnaryMinusExpression)
 
     UnaryMinusExpression(ExpressionNode *e):
         expression (e) { kind = K; }
@@ -1116,7 +1116,7 @@
 class QML_PARSER_EXPORT TildeExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(TildeExpression)
+    QQMLJS_DECLARE_AST_NODE(TildeExpression)
 
     TildeExpression(ExpressionNode *e):
         expression (e) { kind = K; }
@@ -1137,7 +1137,7 @@
 class QML_PARSER_EXPORT NotExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(NotExpression)
+    QQMLJS_DECLARE_AST_NODE(NotExpression)
 
     NotExpression(ExpressionNode *e):
         expression (e) { kind = K; }
@@ -1158,7 +1158,7 @@
 class QML_PARSER_EXPORT BinaryExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(BinaryExpression)
+    QQMLJS_DECLARE_AST_NODE(BinaryExpression)
 
     BinaryExpression(ExpressionNode *l, int o, ExpressionNode *r):
         left (l), op (o), right (r)
@@ -1184,7 +1184,7 @@
 class QML_PARSER_EXPORT ConditionalExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(ConditionalExpression)
+    QQMLJS_DECLARE_AST_NODE(ConditionalExpression)
 
     ConditionalExpression(ExpressionNode *e, ExpressionNode *t, ExpressionNode *f):
         expression (e), ok (t), ko (f)
@@ -1209,7 +1209,7 @@
 class QML_PARSER_EXPORT Expression: public ExpressionNode // ### rename
 {
 public:
-    QMLJS_DECLARE_AST_NODE(Expression)
+    QQMLJS_DECLARE_AST_NODE(Expression)
 
     Expression(ExpressionNode *l, ExpressionNode *r):
         left (l), right (r) { kind = K; }
@@ -1231,7 +1231,7 @@
 class QML_PARSER_EXPORT Block: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(Block)
+    QQMLJS_DECLARE_AST_NODE(Block)
 
     Block(StatementList *slist):
         statements (slist) { kind = K; }
@@ -1253,7 +1253,7 @@
 class QML_PARSER_EXPORT StatementList: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(StatementList)
+    QQMLJS_DECLARE_AST_NODE(StatementList)
 
     StatementList(Statement *stmt):
         statement (stmt), next (this)
@@ -1290,7 +1290,7 @@
 class QML_PARSER_EXPORT VariableStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(VariableStatement)
+    QQMLJS_DECLARE_AST_NODE(VariableStatement)
 
     VariableStatement(VariableDeclarationList *vlist):
         declarations (vlist)
@@ -1313,7 +1313,7 @@
 class QML_PARSER_EXPORT VariableDeclaration: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(VariableDeclaration)
+    QQMLJS_DECLARE_AST_NODE(VariableDeclaration)
 
     VariableDeclaration(const QStringRef &n, ExpressionNode *e):
         name (n), expression (e), readOnly(false)
@@ -1337,7 +1337,7 @@
 class QML_PARSER_EXPORT VariableDeclarationList: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(VariableDeclarationList)
+    QQMLJS_DECLARE_AST_NODE(VariableDeclarationList)
 
     VariableDeclarationList(VariableDeclaration *decl):
         declaration (decl), next (this)
@@ -1384,7 +1384,7 @@
 class QML_PARSER_EXPORT EmptyStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(EmptyStatement)
+    QQMLJS_DECLARE_AST_NODE(EmptyStatement)
 
     EmptyStatement() { kind = K; }
 
@@ -1403,7 +1403,7 @@
 class QML_PARSER_EXPORT ExpressionStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(ExpressionStatement)
+    QQMLJS_DECLARE_AST_NODE(ExpressionStatement)
 
     ExpressionStatement(ExpressionNode *e):
         expression (e) { kind = K; }
@@ -1424,7 +1424,7 @@
 class QML_PARSER_EXPORT IfStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(IfStatement)
+    QQMLJS_DECLARE_AST_NODE(IfStatement)
 
     IfStatement(ExpressionNode *e, Statement *t, Statement *f = 0):
         expression (e), ok (t), ko (f)
@@ -1456,7 +1456,7 @@
 class QML_PARSER_EXPORT DoWhileStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(DoWhileStatement)
+    QQMLJS_DECLARE_AST_NODE(DoWhileStatement)
 
     DoWhileStatement(Statement *stmt, ExpressionNode *e):
         statement (stmt), expression (e)
@@ -1483,7 +1483,7 @@
 class QML_PARSER_EXPORT WhileStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(WhileStatement)
+    QQMLJS_DECLARE_AST_NODE(WhileStatement)
 
     WhileStatement(ExpressionNode *e, Statement *stmt):
         expression (e), statement (stmt)
@@ -1508,7 +1508,7 @@
 class QML_PARSER_EXPORT ForStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(ForStatement)
+    QQMLJS_DECLARE_AST_NODE(ForStatement)
 
     ForStatement(ExpressionNode *i, ExpressionNode *c, ExpressionNode *e, Statement *stmt):
         initialiser (i), condition (c), expression (e), statement (stmt)
@@ -1537,7 +1537,7 @@
 class QML_PARSER_EXPORT LocalForStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(LocalForStatement)
+    QQMLJS_DECLARE_AST_NODE(LocalForStatement)
 
     LocalForStatement(VariableDeclarationList *vlist, ExpressionNode *c, ExpressionNode *e, Statement *stmt):
         declarations (vlist), condition (c), expression (e), statement (stmt)
@@ -1567,7 +1567,7 @@
 class QML_PARSER_EXPORT ForEachStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(ForEachStatement)
+    QQMLJS_DECLARE_AST_NODE(ForEachStatement)
 
     ForEachStatement(ExpressionNode *i, ExpressionNode *e, Statement *stmt):
         initialiser (i), expression (e), statement (stmt)
@@ -1594,7 +1594,7 @@
 class QML_PARSER_EXPORT LocalForEachStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(LocalForEachStatement)
+    QQMLJS_DECLARE_AST_NODE(LocalForEachStatement)
 
     LocalForEachStatement(VariableDeclaration *v, ExpressionNode *e, Statement *stmt):
         declaration (v), expression (e), statement (stmt)
@@ -1622,7 +1622,7 @@
 class QML_PARSER_EXPORT ContinueStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(ContinueStatement)
+    QQMLJS_DECLARE_AST_NODE(ContinueStatement)
 
     ContinueStatement(const QStringRef &l = QStringRef()):
         label (l) { kind = K; }
@@ -1645,7 +1645,7 @@
 class QML_PARSER_EXPORT BreakStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(BreakStatement)
+    QQMLJS_DECLARE_AST_NODE(BreakStatement)
 
     BreakStatement(const QStringRef &l):
         label (l) { kind = K; }
@@ -1668,7 +1668,7 @@
 class QML_PARSER_EXPORT ReturnStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(ReturnStatement)
+    QQMLJS_DECLARE_AST_NODE(ReturnStatement)
 
     ReturnStatement(ExpressionNode *e):
         expression (e) { kind = K; }
@@ -1690,7 +1690,7 @@
 class QML_PARSER_EXPORT WithStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(WithStatement)
+    QQMLJS_DECLARE_AST_NODE(WithStatement)
 
     WithStatement(ExpressionNode *e, Statement *stmt):
         expression (e), statement (stmt)
@@ -1715,7 +1715,7 @@
 class QML_PARSER_EXPORT CaseBlock: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(CaseBlock)
+    QQMLJS_DECLARE_AST_NODE(CaseBlock)
 
     CaseBlock(CaseClauses *c, DefaultClause *d = 0, CaseClauses *r = 0):
         clauses (c), defaultClause (d), moreClauses (r)
@@ -1740,7 +1740,7 @@
 class QML_PARSER_EXPORT SwitchStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(SwitchStatement)
+    QQMLJS_DECLARE_AST_NODE(SwitchStatement)
 
     SwitchStatement(ExpressionNode *e, CaseBlock *b):
         expression (e), block (b)
@@ -1765,7 +1765,7 @@
 class QML_PARSER_EXPORT CaseClause: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(CaseClause)
+    QQMLJS_DECLARE_AST_NODE(CaseClause)
 
     CaseClause(ExpressionNode *e, StatementList *slist):
         expression (e), statements (slist)
@@ -1789,7 +1789,7 @@
 class QML_PARSER_EXPORT CaseClauses: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(CaseClauses)
+    QQMLJS_DECLARE_AST_NODE(CaseClauses)
 
     CaseClauses(CaseClause *c):
         clause (c), next (this)
@@ -1826,7 +1826,7 @@
 class QML_PARSER_EXPORT DefaultClause: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(DefaultClause)
+    QQMLJS_DECLARE_AST_NODE(DefaultClause)
 
     DefaultClause(StatementList *slist):
         statements (slist)
@@ -1849,7 +1849,7 @@
 class QML_PARSER_EXPORT LabelledStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(LabelledStatement)
+    QQMLJS_DECLARE_AST_NODE(LabelledStatement)
 
     LabelledStatement(const QStringRef &l, Statement *stmt):
         label (l), statement (stmt)
@@ -1873,7 +1873,7 @@
 class QML_PARSER_EXPORT ThrowStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(ThrowStatement)
+    QQMLJS_DECLARE_AST_NODE(ThrowStatement)
 
     ThrowStatement(ExpressionNode *e):
         expression (e) { kind = K; }
@@ -1895,7 +1895,7 @@
 class QML_PARSER_EXPORT Catch: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(Catch)
+    QQMLJS_DECLARE_AST_NODE(Catch)
 
     Catch(const QStringRef &n, Block *stmt):
         name (n), statement (stmt)
@@ -1921,7 +1921,7 @@
 class QML_PARSER_EXPORT Finally: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(Finally)
+    QQMLJS_DECLARE_AST_NODE(Finally)
 
     Finally(Block *stmt):
         statement (stmt)
@@ -1943,7 +1943,7 @@
 class QML_PARSER_EXPORT TryStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(TryStatement)
+    QQMLJS_DECLARE_AST_NODE(TryStatement)
 
     TryStatement(Statement *stmt, Catch *c, Finally *f):
         statement (stmt), catchExpression (c), finallyExpression (f)
@@ -1982,7 +1982,7 @@
 class QML_PARSER_EXPORT FunctionExpression: public ExpressionNode
 {
 public:
-    QMLJS_DECLARE_AST_NODE(FunctionExpression)
+    QQMLJS_DECLARE_AST_NODE(FunctionExpression)
 
     FunctionExpression(const QStringRef &n, FormalParameterList *f, FunctionBody *b):
         name (n), formals (f), body (b)
@@ -2011,7 +2011,7 @@
 class QML_PARSER_EXPORT FunctionDeclaration: public FunctionExpression
 {
 public:
-    QMLJS_DECLARE_AST_NODE(FunctionDeclaration)
+    QQMLJS_DECLARE_AST_NODE(FunctionDeclaration)
 
     FunctionDeclaration(const QStringRef &n, FormalParameterList *f, FunctionBody *b):
         FunctionExpression(n, f, b)
@@ -2023,7 +2023,7 @@
 class QML_PARSER_EXPORT FormalParameterList: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(FormalParameterList)
+    QQMLJS_DECLARE_AST_NODE(FormalParameterList)
 
     FormalParameterList(const QStringRef &n):
         name (n), next (this)
@@ -2062,7 +2062,7 @@
 class QML_PARSER_EXPORT SourceElement: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(SourceElement)
+    QQMLJS_DECLARE_AST_NODE(SourceElement)
 
     inline SourceElement()
         { kind = K; }
@@ -2071,7 +2071,7 @@
 class QML_PARSER_EXPORT SourceElements: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(SourceElements)
+    QQMLJS_DECLARE_AST_NODE(SourceElements)
 
     SourceElements(SourceElement *elt):
         element (elt), next (this)
@@ -2108,7 +2108,7 @@
 class QML_PARSER_EXPORT FunctionBody: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(FunctionBody)
+    QQMLJS_DECLARE_AST_NODE(FunctionBody)
 
     FunctionBody(SourceElements *elts):
         elements (elts)
@@ -2129,7 +2129,7 @@
 class QML_PARSER_EXPORT Program: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(Program)
+    QQMLJS_DECLARE_AST_NODE(Program)
 
     Program(SourceElements *elts):
         elements (elts)
@@ -2150,7 +2150,7 @@
 class QML_PARSER_EXPORT FunctionSourceElement: public SourceElement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(FunctionSourceElement)
+    QQMLJS_DECLARE_AST_NODE(FunctionSourceElement)
 
     FunctionSourceElement(FunctionDeclaration *f):
         declaration (f)
@@ -2171,7 +2171,7 @@
 class QML_PARSER_EXPORT StatementSourceElement: public SourceElement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(StatementSourceElement)
+    QQMLJS_DECLARE_AST_NODE(StatementSourceElement)
 
     StatementSourceElement(Statement *stmt):
         statement (stmt)
@@ -2192,7 +2192,7 @@
 class QML_PARSER_EXPORT DebuggerStatement: public Statement
 {
 public:
-    QMLJS_DECLARE_AST_NODE(DebuggerStatement)
+    QQMLJS_DECLARE_AST_NODE(DebuggerStatement)
 
     DebuggerStatement()
         { kind = K; }
@@ -2213,7 +2213,7 @@
 class QML_PARSER_EXPORT UiQualifiedId: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiQualifiedId)
+    QQMLJS_DECLARE_AST_NODE(UiQualifiedId)
 
     UiQualifiedId(const QStringRef &name)
         : next(this), name(name)
@@ -2251,7 +2251,7 @@
 class QML_PARSER_EXPORT UiImport: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiImport)
+    QQMLJS_DECLARE_AST_NODE(UiImport)
 
     UiImport(const QStringRef &fileName)
         : fileName(fileName), importUri(0)
@@ -2293,7 +2293,7 @@
 class QML_PARSER_EXPORT UiObjectMemberList: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiObjectMemberList)
+    QQMLJS_DECLARE_AST_NODE(UiObjectMemberList)
 
     UiObjectMemberList(UiObjectMember *member)
         : next(this), member(member)
@@ -2330,7 +2330,7 @@
 class QML_PARSER_EXPORT UiQualifiedPragmaId: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiQualifiedPragmaId)
+    QQMLJS_DECLARE_AST_NODE(UiQualifiedPragmaId)
 
     UiQualifiedPragmaId(const QStringRef &name)
         : next(this), name(name)
@@ -2368,7 +2368,7 @@
 class QML_PARSER_EXPORT UiPragma: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiPragma)
+    QQMLJS_DECLARE_AST_NODE(UiPragma)
 
     UiPragma(UiQualifiedPragmaId *type)
         : pragmaType(type)
@@ -2391,7 +2391,7 @@
 class QML_PARSER_EXPORT UiHeaderItemList: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiHeaderItemList)
+    QQMLJS_DECLARE_AST_NODE(UiHeaderItemList)
 
     UiHeaderItemList(UiImport *import)
         : headerItem(import), next(this)
@@ -2440,7 +2440,7 @@
 class QML_PARSER_EXPORT UiProgram: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiProgram)
+    QQMLJS_DECLARE_AST_NODE(UiProgram)
 
     UiProgram(UiHeaderItemList *headers, UiObjectMemberList *members)
         : headers(headers), members(members)
@@ -2474,7 +2474,7 @@
 class QML_PARSER_EXPORT UiArrayMemberList: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiArrayMemberList)
+    QQMLJS_DECLARE_AST_NODE(UiArrayMemberList)
 
     UiArrayMemberList(UiObjectMember *member)
         : next(this), member(member)
@@ -2512,7 +2512,7 @@
 class QML_PARSER_EXPORT UiObjectInitializer: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiObjectInitializer)
+    QQMLJS_DECLARE_AST_NODE(UiObjectInitializer)
 
     UiObjectInitializer(UiObjectMemberList *members)
         : members(members)
@@ -2535,7 +2535,7 @@
 class QML_PARSER_EXPORT UiParameterList: public Node
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiParameterList)
+    QQMLJS_DECLARE_AST_NODE(UiParameterList)
 
     UiParameterList(const QStringRef &t, const QStringRef &n):
         type (t), name (n), next (this)
@@ -2576,7 +2576,7 @@
 class QML_PARSER_EXPORT UiPublicMember: public UiObjectMember
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiPublicMember)
+    QQMLJS_DECLARE_AST_NODE(UiPublicMember)
 
     UiPublicMember(const QStringRef &memberType,
                    const QStringRef &name)
@@ -2634,7 +2634,7 @@
 class QML_PARSER_EXPORT UiObjectDefinition: public UiObjectMember
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiObjectDefinition)
+    QQMLJS_DECLARE_AST_NODE(UiObjectDefinition)
 
     UiObjectDefinition(UiQualifiedId *qualifiedTypeNameId,
                        UiObjectInitializer *initializer)
@@ -2657,7 +2657,7 @@
 class QML_PARSER_EXPORT UiSourceElement: public UiObjectMember
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiSourceElement)
+    QQMLJS_DECLARE_AST_NODE(UiSourceElement)
 
     UiSourceElement(Node *sourceElement)
         : sourceElement(sourceElement)
@@ -2693,7 +2693,7 @@
 class QML_PARSER_EXPORT UiObjectBinding: public UiObjectMember
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiObjectBinding)
+    QQMLJS_DECLARE_AST_NODE(UiObjectBinding)
 
     UiObjectBinding(UiQualifiedId *qualifiedId,
                     UiQualifiedId *qualifiedTypeNameId,
@@ -2729,7 +2729,7 @@
 class QML_PARSER_EXPORT UiScriptBinding: public UiObjectMember
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiScriptBinding)
+    QQMLJS_DECLARE_AST_NODE(UiScriptBinding)
 
     UiScriptBinding(UiQualifiedId *qualifiedId,
                     Statement *statement)
@@ -2754,7 +2754,7 @@
 class QML_PARSER_EXPORT UiArrayBinding: public UiObjectMember
 {
 public:
-    QMLJS_DECLARE_AST_NODE(UiArrayBinding)
+    QQMLJS_DECLARE_AST_NODE(UiArrayBinding)
 
     UiArrayBinding(UiQualifiedId *qualifiedId,
                    UiArrayMemberList *members)
diff -bur ./qmljsastfwd_p.h ../declarative/parser/qmljsastfwd_p.h
--- ./qmljsastfwd_p.h	2018-04-01 19:25:18.399604000 +0300
+++ ../declarative/parser/qmljsastfwd_p.h	2018-03-31 00:00:07.576179300 +0300
@@ -37,10 +37,10 @@
 **
 ****************************************************************************/
 
-#ifndef QMLJSASTFWD_P_H
-#define QMLJSASTFWD_P_H
+#ifndef QQMLJSAST_FWD_P_H
+#define QQMLJSAST_FWD_P_H
 
-#include "qmljsglobal_p.h"
+#include "qqmljsglobal_p.h"
 
 #include <QtCore/qglobal.h>
 
@@ -57,7 +57,7 @@
 
 QT_QML_BEGIN_NAMESPACE
 
-namespace QmlJS { namespace AST {
+namespace QQmlJS { namespace AST {
 
 class SourceLocation
 {
diff -bur ./qmljsastvisitor.cpp ../declarative/parser/qmljsastvisitor.cpp
--- ./qmljsastvisitor.cpp	2018-04-01 19:31:36.465295300 +0300
+++ ../declarative/parser/qmljsastvisitor.cpp	2018-03-31 00:00:07.576679500 +0300
@@ -37,11 +37,11 @@
 **
 ****************************************************************************/
 
-#include "qmljsastvisitor_p.h"
+#include "qqmljsastvisitor_p.h"
 
 QT_QML_BEGIN_NAMESPACE
 
-namespace QmlJS { namespace AST {
+namespace QQmlJS { namespace AST {
 
 Visitor::Visitor()
 {
@@ -51,6 +51,6 @@
 {
 }
 
-} } // namespace QmlJS::AST
+} } // namespace QQmlJS::AST
 
 QT_QML_END_NAMESPACE
diff -bur ./qmljsastvisitor_p.h ../declarative/parser/qmljsastvisitor_p.h
--- ./qmljsastvisitor_p.h	2018-04-01 19:26:06.365924700 +0300
+++ ../declarative/parser/qmljsastvisitor_p.h	2018-03-31 00:00:07.577680000 +0300
@@ -37,8 +37,8 @@
 **
 ****************************************************************************/
 
-#ifndef QMLJSASTVISITOR_P_H
-#define QMLJSASTVISITOR_P_H
+#ifndef QQMLJSASTVISITOR_P_H
+#define QQMLJSASTVISITOR_P_H
 
 //
 //  W A R N I N G
@@ -51,12 +51,12 @@
 // We mean it.
 //
 
-#include "qmljsastfwd_p.h"
-#include "qmljsglobal_p.h"
+#include "qqmljsastfwd_p.h"
+#include "qqmljsglobal_p.h"
 
 QT_QML_BEGIN_NAMESPACE
 
-namespace QmlJS { namespace AST {
+namespace QQmlJS { namespace AST {
 
 class QML_PARSER_EXPORT Visitor
 {
@@ -102,7 +102,7 @@
     virtual void endVisit(UiQualifiedId *) {}
     virtual void endVisit(UiQualifiedPragmaId *) {}
 
-    // QmlJS
+    // QQmlJS
     virtual bool visit(ThisExpression *) { return true; }
     virtual void endVisit(ThisExpression *) {}
 
@@ -336,4 +336,4 @@
 
 QT_QML_END_NAMESPACE
 
-#endif
+#endif // QQMLJSASTVISITOR_P_H
diff -bur ./qmljsengine_p.cpp ../declarative/parser/qmljsengine_p.cpp
--- ./qmljsengine_p.cpp	2018-04-01 19:31:40.513152200 +0300
+++ ../declarative/parser/qmljsengine_p.cpp	2018-03-31 00:00:07.578179800 +0300
@@ -37,16 +37,16 @@
 **
 ****************************************************************************/
 
-#include "qmljsengine_p.h"
-#include "qmljsglobal_p.h"
+#include "qqmljsengine_p.h"
+#include "qqmljsglobal_p.h"
 
-#include <QtCore/qnumeric.h>
+#include <QtCore/private/qnumeric_p.h>
 #include <QtCore/qhash.h>
 #include <QtCore/qdebug.h>
 
 QT_QML_BEGIN_NAMESPACE
 
-namespace QmlJS {
+namespace QQmlJS {
 
 static inline int toDigit(char c)
 {
@@ -62,7 +62,7 @@
 double integerFromString(const char *buf, int size, int radix)
 {
     if (size == 0)
-        return qQNaN();
+        return qt_qnan();
 
     double sign = 1.0;
     int i = 0;
@@ -101,7 +101,7 @@
         if (!qstrcmp(buf, "Infinity"))
             result = qInf();
         else
-            result = qQNaN();
+            result = qt_qnan();
     } else {
         result = 0;
         double multiplier = 1;
@@ -130,9 +130,9 @@
 { _code = code; }
 
 void Engine::addComment(int pos, int len, int line, int col)
-{ if (len > 0) _comments.append(QmlJS::AST::SourceLocation(pos, len, line, col)); }
+{ if (len > 0) _comments.append(QQmlJS::AST::SourceLocation(pos, len, line, col)); }
 
-QList<QmlJS::AST::SourceLocation> Engine::comments() const
+QList<QQmlJS::AST::SourceLocation> Engine::comments() const
 { return _comments; }
 
 Lexer *Engine::lexer() const
@@ -160,6 +160,6 @@
 QStringRef Engine::newStringRef(const QChar *chars, int size)
 { return newStringRef(QString(chars, size)); }
 
-} // end of namespace QmlJS
+} // end of namespace QQmlJS
 
 QT_QML_END_NAMESPACE
diff -bur ./qmljsengine_p.h ../declarative/parser/qmljsengine_p.h
--- ./qmljsengine_p.h	2018-04-01 19:26:35.445687200 +0300
+++ ../declarative/parser/qmljsengine_p.h	2018-03-31 00:00:07.579199800 +0300
@@ -37,8 +37,8 @@
 **
 ****************************************************************************/
 
-#ifndef QMLJSENGINE_P_H
-#define QMLJSENGINE_P_H
+#ifndef QQMLJSENGINE_P_H
+#define QQMLJSENGINE_P_H
 
 //
 //  W A R N I N G
@@ -51,17 +51,16 @@
 // We mean it.
 //
 
-#include "qmljsglobal_p.h"
-#include "qmljsastfwd_p.h"
-#include "qmljsmemorypool_p.h"
+#include "qqmljsglobal_p.h"
+#include "qqmljsastfwd_p.h"
+#include "qqmljsmemorypool_p.h"
 
-#include <QString>
-#include <QSet>
+#include <QtCore/qstring.h>
+#include <QtCore/qset.h>
 
-#include <qmljs/qmljsconstants.h>
 QT_QML_BEGIN_NAMESPACE
 
-namespace QmlJS {
+namespace QQmlJS {
 
 class Lexer;
 class Directives;
@@ -70,19 +69,21 @@
 class QML_PARSER_EXPORT DiagnosticMessage
 {
 public:
+    enum Kind { Warning, Error };
+
     DiagnosticMessage()
-        : kind(Severity::Error) {}
+        : kind(Error) {}
 
-    DiagnosticMessage(Severity::Enum kind, const AST::SourceLocation &loc, const QString &message)
+    DiagnosticMessage(Kind kind, const AST::SourceLocation &loc, const QString &message)
         : kind(kind), loc(loc), message(message) {}
 
     bool isWarning() const
-    { return kind == Severity::Warning; }
+    { return kind == Warning; }
 
     bool isError() const
-    { return kind == Severity::Error; }
+    { return kind == Error; }
 
-    Severity::Enum kind;
+    Kind kind;
     AST::SourceLocation loc;
     QString message;
 };
@@ -122,8 +123,8 @@
 
 double integerFromString(const char *buf, int size, int radix);
 
-} // end of namespace QmlJS
+} // end of namespace QQmlJS
 
 QT_QML_END_NAMESPACE
 
-#endif
+#endif // QQMLJSENGINE_P_H
diff -bur ./qmljsglobal_p.h ../declarative/parser/qmljsglobal_p.h
--- ./qmljsglobal_p.h	2018-04-01 19:27:14.989248700 +0300
+++ ../declarative/parser/qmljsglobal_p.h	2018-03-31 00:00:07.579699200 +0300
@@ -36,9 +36,8 @@
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
-
-#ifndef QMLJSGLOBAL_P_H
-#define QMLJSGLOBAL_P_H
+#ifndef QQMLJSGLOBAL_P_H
+#define QQMLJSGLOBAL_P_H
 
 //
 //  W A R N I N G
@@ -53,21 +52,17 @@
 
 #include <QtCore/qglobal.h>
 
-//#define QML_PARSER_EXPORT
-//#  define QT_QML_BEGIN_NAMESPACE QT_BEGIN_NAMESPACE
-//#  define QT_QML_END_NAMESPACE QT_END_NAMESPACE
-
 #ifdef QT_CREATOR
 #  define QT_QML_BEGIN_NAMESPACE
 #  define QT_QML_END_NAMESPACE
 
-#  ifdef QMLJS_BUILD_DIR
+#  ifdef QDECLARATIVEJS_BUILD_DIR
 #    define QML_PARSER_EXPORT Q_DECL_EXPORT
 #  elif QML_BUILD_STATIC_LIB
 #    define QML_PARSER_EXPORT
 #  else
 #    define QML_PARSER_EXPORT Q_DECL_IMPORT
-#  endif // QMLJS_BUILD_DIR
+#  endif // QQMLJS_BUILD_DIR
 
 #else // !QT_CREATOR
 #  define QT_QML_BEGIN_NAMESPACE QT_BEGIN_NAMESPACE
@@ -82,4 +77,4 @@
 #  endif
 #endif // QT_CREATOR
 
-#endif // QMLJSGLOBAL_P_H
+#endif // QQMLJSGLOBAL_P_H
diff -bur ./qmljsgrammar.cpp ../declarative/parser/qmljsgrammar.cpp
--- ./qmljsgrammar.cpp	2018-04-01 19:31:44.737617100 +0300
+++ ../declarative/parser/qmljsgrammar.cpp	2018-03-31 00:00:07.580700900 +0300
@@ -3,7 +3,7 @@
 ** Copyright (C) 2016 The Qt Company Ltd.
 ** Contact: https://www.qt.io/licensing/
 **
-** This file is part of the QtQml module of the Qt Toolkit.
+** This file is part of the Qt Toolkit.
 **
 ** $QT_BEGIN_LICENSE:LGPL$
 ** Commercial License Usage
@@ -38,11 +38,11 @@
 ****************************************************************************/
 
 // This file was generated by qlalr - DO NOT EDIT!
-#include "qmljsgrammar_p.h"
+#include "qqmljsgrammar_p.h"
 
 QT_BEGIN_NAMESPACE
 
-const char *const QmlJSGrammar::spell [] = {
+const char *const QQmlJSGrammar::spell [] = {
   "end of file", "&", "&&", "&=", "break", "case", "catch", ":", ",", "continue", 
   "default", "delete", "/", "/=", "do", ".", "else", "=", "==", "===", 
   "finally", "for", "function", ">=", ">", ">>", ">>=", ">>>", ">>>=", "identifier", 
@@ -55,7 +55,7 @@
   "public", "import", "pragma", "as", "on", "get", "set", 0, 0, 0, 
   0, 0, 0, 0, 0, 0};
 
-const short QmlJSGrammar::lhs [] = {
+const short QQmlJSGrammar::lhs [] = {
   106, 106, 106, 106, 106, 106, 107, 113, 113, 116, 
   116, 116, 116, 119, 121, 117, 117, 118, 118, 118, 
   118, 118, 118, 118, 118, 122, 123, 115, 114, 126, 
@@ -93,7 +93,7 @@
   155, 155, 213, 213, 152, 152, 151, 151, 214, 112, 
   112, 215, 215, 110, 110, 146, 146, 216};
 
-const short QmlJSGrammar::rhs [] = {
+const short QQmlJSGrammar::rhs [] = {
   2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 
   1, 2, 2, 1, 1, 2, 2, 2, 2, 3, 
   3, 5, 5, 4, 4, 2, 2, 0, 1, 1, 
@@ -131,7 +131,7 @@
   8, 7, 1, 3, 0, 1, 0, 1, 1, 1, 
   1, 1, 2, 1, 1, 0, 1, 2};
 
-const short QmlJSGrammar::action_default [] = {
+const short QQmlJSGrammar::action_default [] = {
   0, 0, 28, 0, 0, 0, 28, 0, 185, 252, 
   216, 224, 220, 164, 236, 212, 3, 149, 82, 165, 
   228, 232, 153, 182, 163, 168, 148, 202, 189, 0, 
@@ -200,7 +200,7 @@
   0, 18, 0, 19, 0, 24, 25, 0, 20, 21, 
   0, 22, 23, 16, 17, 358};
 
-const short QmlJSGrammar::goto_default [] = {
+const short QQmlJSGrammar::goto_default [] = {
   7, 641, 211, 198, 209, 521, 509, 636, 649, 508, 
   635, 639, 637, 645, 22, 642, 640, 638, 18, 520, 
   562, 552, 559, 554, 539, 193, 197, 199, 204, 234, 
@@ -214,7 +214,7 @@
   431, 434, 430, 429, 449, 450, 200, 186, 201, 210, 
   0};
 
-const short QmlJSGrammar::action_index [] = {
+const short QQmlJSGrammar::action_index [] = {
   264, 1225, 2708, 2708, 2606, 938, 94, 104, 119, -106, 
   92, 79, 81, 262, -106, 263, 78, -106, -106, 654, 
   89, 125, 259, 229, -106, -106, -106, 322, 314, 1225, 
@@ -351,7 +351,7 @@
   -14, -111, -111, -111, -111, -111, -111, -8, -111, -111, 
   -111, -111, -111, -111, -111, -111};
 
-const short QmlJSGrammar::action_info [] = {
+const short QQmlJSGrammar::action_info [] = {
   424, 405, 432, 404, 346, 245, 573, 354, 406, -134, 
   461, -112, -113, -131, -136, 448, 350, -139, 402, 392, 
   268, -123, -142, 465, 399, 398, -131, -139, 465, 461, 
@@ -716,7 +716,7 @@
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0};
 
-const short QmlJSGrammar::action_check [] = {
+const short QQmlJSGrammar::action_check [] = {
   36, 60, 5, 36, 31, 7, 66, 16, 33, 7, 
   36, 7, 7, 7, 7, 33, 36, 7, 55, 8, 
   36, 7, 7, 36, 7, 55, 7, 7, 36, 36, 
diff -bur ./qmljsgrammar_p.h ../declarative/parser/qmljsgrammar_p.h
--- ./qmljsgrammar_p.h	2018-04-01 19:28:01.100111100 +0300
+++ ../declarative/parser/qmljsgrammar_p.h	2018-03-31 00:00:07.581199800 +0300
@@ -3,7 +3,7 @@
 ** Copyright (C) 2016 The Qt Company Ltd.
 ** Contact: https://www.qt.io/licensing/
 **
-** This file is part of the QtQml module of the Qt Toolkit.
+** This file is part of the Qt Toolkit.
 **
 ** $QT_BEGIN_LICENSE:LGPL$
 ** Commercial License Usage
@@ -37,9 +37,6 @@
 **
 ****************************************************************************/
 
-#ifndef QMLJSGRAMMAR_P_H
-#define QMLJSGRAMMAR_P_H
-
 //
 //  W A R N I N G
 //  -------------
@@ -52,13 +49,14 @@
 //
 
 // This file was generated by qlalr - DO NOT EDIT!
+#ifndef QQMLJSGRAMMAR_P_H
+#define QQMLJSGRAMMAR_P_H
 
-#include "qmljsglobal_p.h"
 #include <QtCore/qglobal.h>
 
 QT_BEGIN_NAMESPACE
 
-class QML_PARSER_EXPORT QmlJSGrammar
+class QQmlJSGrammar
 {
 public:
   enum VariousConstants {
@@ -211,5 +209,5 @@
 
 
 QT_END_NAMESPACE
+#endif // QQMLJSGRAMMAR_P_H
 
-#endif
diff -bur ./qmljskeywords_p.h ../declarative/parser/qmljskeywords_p.h
--- ./qmljskeywords_p.h	2018-04-01 19:28:34.100199400 +0300
+++ ../declarative/parser/qmljskeywords_p.h	2018-03-31 00:00:07.582200300 +0300
@@ -37,8 +37,8 @@
 **
 ****************************************************************************/
 
-#ifndef QMLJSKEYWORDS_P_H
-#define QMLJSKEYWORDS_P_H
+#ifndef QQMLJSKEYWORDS_P_H
+#define QQMLJSKEYWORDS_P_H
 
 //
 //  W A R N I N G
@@ -51,11 +51,11 @@
 // We mean it.
 //
 
-#include "qmljslexer_p.h"
+#include "qqmljslexer_p.h"
 
 QT_QML_BEGIN_NAMESPACE
 
-namespace QmlJS {
+namespace QQmlJS {
 
 static inline int classify2(const QChar *s, bool qmlMode) {
   if (s[0].unicode() == 'a') {
@@ -690,7 +690,7 @@
             if (s[5].unicode() == 'r') {
               if (s[6].unicode() == 't') {
                 if (s[7].unicode() == 'y') {
-                  return qmlMode ? Lexer::T_PROPERTY : Lexer::T_IDENTIFIER;
+                  return Lexer::T_PROPERTY;
                 }
               }
             }
@@ -886,8 +886,8 @@
   } // switch
 }
 
-} // namespace QmlJS
+} // namespace QQmlJS
 
 QT_QML_END_NAMESPACE
 
-#endif
+#endif // QQMLJSKEYWORDS_P_H
diff -bur ./qmljslexer.cpp ../declarative/parser/qmljslexer.cpp
--- ./qmljslexer.cpp	2018-04-01 19:31:49.017795200 +0300
+++ ../declarative/parser/qmljslexer.cpp	2018-03-31 00:00:07.583202000 +0300
@@ -37,10 +37,10 @@
 **
 ****************************************************************************/
 
-#include "qmljslexer_p.h"
-#include "qmljsengine_p.h"
-#include "qmljsmemorypool_p.h"
-#include "qmljskeywords_p.h"
+#include "qqmljslexer_p.h"
+#include "qqmljsengine_p.h"
+#include "qqmljsmemorypool_p.h"
+#include "qqmljskeywords_p.h"
 
 #include <QtCore/qcoreapplication.h>
 #include <QtCore/qvarlengtharray.h>
@@ -50,7 +50,7 @@
 Q_CORE_EXPORT double qstrtod(const char *s00, char const **se, bool *ok);
 QT_END_NAMESPACE
 
-using namespace QmlJS;
+using namespace QQmlJS;
 
 static inline int regExpFlagFromChar(const QChar &ch)
 {
@@ -595,7 +595,7 @@
 
             if (end - begin != chars.size() - 1) {
                 _errorCode = IllegalExponentIndicator;
-                _errorMessage = QCoreApplication::translate("QmlParser", "Illegal syntax for exponential number.");
+                _errorMessage = QCoreApplication::translate("QQmlParser", "Illegal syntax for exponential number");
                 return T_ERROR;
             }
 
@@ -688,7 +688,7 @@
                     if (qmlMode())
                         break;
                     _errorCode = IllegalCharacter;
-                    _errorMessage = QCoreApplication::translate("QmlParser", "Stray newline in string literal.");
+                    _errorMessage = QCoreApplication::translate("QQmlParser", "Stray newline in string literal");
                     return T_ERROR;
                 } else if (_char == QLatin1Char('\\')) {
                     break;
@@ -734,7 +734,7 @@
                     u = decodeUnicodeEscapeCharacter(&ok);
                     if (! ok) {
                         _errorCode = IllegalUnicodeEscapeSequence;
-                        _errorMessage = QCoreApplication::translate("QmlParser", "Illegal unicode escape sequence.");
+                        _errorMessage = QCoreApplication::translate("QQmlParser", "Illegal unicode escape sequence");
                         return T_ERROR;
                     }
                 } break;
@@ -745,7 +745,7 @@
                     u = decodeHexEscapeCharacter(&ok);
                     if (!ok) {
                         _errorCode = IllegalHexadecimalEscapeSequence;
-                        _errorMessage = QCoreApplication::translate("QmlParser", "Illegal hexadecimal escape sequence.");
+                        _errorMessage = QCoreApplication::translate("QQmlParser", "Illegal hexadecimal escape sequence");
                         return T_ERROR;
                     }
                 } break;
@@ -778,7 +778,7 @@
                 case '8':
                 case '9':
                     _errorCode = IllegalEscapeSequence;
-                    _errorMessage = QCoreApplication::translate("QmlParser", "Octal escape sequences are not allowed.");
+                    _errorMessage = QCoreApplication::translate("QQmlParser", "Octal escape sequences are not allowed");
                     return T_ERROR;
 
                 case '\r':
@@ -802,7 +802,7 @@
         }
 
         _errorCode = UnclosedStringLiteral;
-        _errorMessage = QCoreApplication::translate("QmlParser", "Unclosed string at end of line.");
+        _errorMessage = QCoreApplication::translate("QQmlParser", "Unclosed string at end of line");
         return T_ERROR;
     }
     case '0':
@@ -826,7 +826,7 @@
             c = decodeUnicodeEscapeCharacter(&ok);
             if (! ok) {
                 _errorCode = IllegalUnicodeEscapeSequence;
-                _errorMessage = QCoreApplication::translate("QmlParser", "Illegal unicode escape sequence.");
+                _errorMessage = QCoreApplication::translate("QQmlParser", "Illegal unicode escape sequence");
                 return T_ERROR;
             }
         }
@@ -851,7 +851,7 @@
                     c = decodeUnicodeEscapeCharacter(&ok);
                     if (! ok) {
                         _errorCode = IllegalUnicodeEscapeSequence;
-                        _errorMessage = QCoreApplication::translate("QmlParser", "Illegal unicode escape sequence.");
+                        _errorMessage = QCoreApplication::translate("QQmlParser", "Illegal unicode escape sequence");
                         return T_ERROR;
                     }
                     if (isIdentifierPart(c))
@@ -914,7 +914,7 @@
         }
     } else if (_char.isDigit() && !qmlMode()) {
         _errorCode = IllegalCharacter;
-        _errorMessage = QCoreApplication::translate("QmlParser", "Decimal numbers cannot start with \"0\".");
+        _errorMessage = QCoreApplication::translate("QQmlParser", "Decimal numbers can't start with '0'");
         return T_ERROR;
     }
 
@@ -935,7 +935,7 @@
 
         if (chars.size() < 3) {
             _errorCode = IllegalHexNumber;
-            _errorMessage = QCoreApplication::translate("QmlParser", "At least one hexadecimal digit is required after \"0%1\".").arg(ch);
+            _errorMessage = QCoreApplication::translate("QQmlParser", "At least one hexadecimal digit is required after '0%1'").arg(ch);
             return T_ERROR;
         }
 
@@ -995,7 +995,7 @@
         }
     }
 
-    if (chars.size() == 1) {
+    if (chars.length() == 1) {
         // if we ended up with a single digit, then it was a '0'
         _tokenValue = 0;
         return T_NUMERIC_LITERAL;
@@ -1011,7 +1011,7 @@
 
     if (end - begin != chars.size() - 1) {
         _errorCode = IllegalExponentIndicator;
-        _errorMessage = QCoreApplication::translate("QmlParser", "Illegal syntax for exponential number.");
+        _errorMessage = QCoreApplication::translate("QQmlParser", "Illegal syntax for exponential number");
         return T_ERROR;
     }
 
@@ -1037,7 +1037,7 @@
             while (isIdentLetter(_char)) {
                 int flag = regExpFlagFromChar(_char);
                 if (flag == 0 || _patternFlags & flag) {
-                    _errorMessage = QCoreApplication::translate("QmlParser", "Invalid regular expression flag \"%0\".")
+                    _errorMessage = QCoreApplication::translate("QQmlParser", "Invalid regular expression flag '%0'")
                              .arg(QChar(_char));
                     return false;
                 }
@@ -1054,7 +1054,7 @@
             scanChar();
 
             if (_codePtr > _endPtr || isLineTerminator()) {
-                _errorMessage = QCoreApplication::translate("QmlParser", "Unterminated regular expression backslash sequence.");
+                _errorMessage = QCoreApplication::translate("QQmlParser", "Unterminated regular expression backslash sequence");
                 return false;
             }
 
@@ -1076,7 +1076,7 @@
                     scanChar();
 
                     if (_codePtr > _endPtr || isLineTerminator()) {
-                        _errorMessage = QCoreApplication::translate("QmlParser", "Unterminated regular expression backslash sequence.");
+                        _errorMessage = QCoreApplication::translate("QQmlParser", "Unterminated regular expression backslash sequence");
                         return false;
                     }
 
@@ -1089,7 +1089,7 @@
             }
 
             if (_char != QLatin1Char(']')) {
-                _errorMessage = QCoreApplication::translate("QmlParser", "Unterminated regular expression class.");
+                _errorMessage = QCoreApplication::translate("QQmlParser", "Unterminated regular expression class");
                 return false;
             }
 
@@ -1099,7 +1099,7 @@
 
         default:
             if (_codePtr > _endPtr || isLineTerminator()) {
-                _errorMessage = QCoreApplication::translate("QmlParser", "Unterminated regular expression literal.");
+                _errorMessage = QCoreApplication::translate("QQmlParser", "Unterminated regular expression literal");
                 return false;
             } else {
                 _tokenText += _char;
@@ -1231,49 +1231,49 @@
 }
 
 static const int uriTokens[] = {
-    QmlJSGrammar::T_IDENTIFIER,
-    QmlJSGrammar::T_PROPERTY,
-    QmlJSGrammar::T_SIGNAL,
-    QmlJSGrammar::T_READONLY,
-    QmlJSGrammar::T_ON,
-    QmlJSGrammar::T_BREAK,
-    QmlJSGrammar::T_CASE,
-    QmlJSGrammar::T_CATCH,
-    QmlJSGrammar::T_CONTINUE,
-    QmlJSGrammar::T_DEFAULT,
-    QmlJSGrammar::T_DELETE,
-    QmlJSGrammar::T_DO,
-    QmlJSGrammar::T_ELSE,
-    QmlJSGrammar::T_FALSE,
-    QmlJSGrammar::T_FINALLY,
-    QmlJSGrammar::T_FOR,
-    QmlJSGrammar::T_FUNCTION,
-    QmlJSGrammar::T_IF,
-    QmlJSGrammar::T_IN,
-    QmlJSGrammar::T_INSTANCEOF,
-    QmlJSGrammar::T_NEW,
-    QmlJSGrammar::T_NULL,
-    QmlJSGrammar::T_RETURN,
-    QmlJSGrammar::T_SWITCH,
-    QmlJSGrammar::T_THIS,
-    QmlJSGrammar::T_THROW,
-    QmlJSGrammar::T_TRUE,
-    QmlJSGrammar::T_TRY,
-    QmlJSGrammar::T_TYPEOF,
-    QmlJSGrammar::T_VAR,
-    QmlJSGrammar::T_VOID,
-    QmlJSGrammar::T_WHILE,
-    QmlJSGrammar::T_CONST,
-    QmlJSGrammar::T_DEBUGGER,
-    QmlJSGrammar::T_RESERVED_WORD,
-    QmlJSGrammar::T_WITH,
+    QQmlJSGrammar::T_IDENTIFIER,
+    QQmlJSGrammar::T_PROPERTY,
+    QQmlJSGrammar::T_SIGNAL,
+    QQmlJSGrammar::T_READONLY,
+    QQmlJSGrammar::T_ON,
+    QQmlJSGrammar::T_BREAK,
+    QQmlJSGrammar::T_CASE,
+    QQmlJSGrammar::T_CATCH,
+    QQmlJSGrammar::T_CONTINUE,
+    QQmlJSGrammar::T_DEFAULT,
+    QQmlJSGrammar::T_DELETE,
+    QQmlJSGrammar::T_DO,
+    QQmlJSGrammar::T_ELSE,
+    QQmlJSGrammar::T_FALSE,
+    QQmlJSGrammar::T_FINALLY,
+    QQmlJSGrammar::T_FOR,
+    QQmlJSGrammar::T_FUNCTION,
+    QQmlJSGrammar::T_IF,
+    QQmlJSGrammar::T_IN,
+    QQmlJSGrammar::T_INSTANCEOF,
+    QQmlJSGrammar::T_NEW,
+    QQmlJSGrammar::T_NULL,
+    QQmlJSGrammar::T_RETURN,
+    QQmlJSGrammar::T_SWITCH,
+    QQmlJSGrammar::T_THIS,
+    QQmlJSGrammar::T_THROW,
+    QQmlJSGrammar::T_TRUE,
+    QQmlJSGrammar::T_TRY,
+    QQmlJSGrammar::T_TYPEOF,
+    QQmlJSGrammar::T_VAR,
+    QQmlJSGrammar::T_VOID,
+    QQmlJSGrammar::T_WHILE,
+    QQmlJSGrammar::T_CONST,
+    QQmlJSGrammar::T_DEBUGGER,
+    QQmlJSGrammar::T_RESERVED_WORD,
+    QQmlJSGrammar::T_WITH,
 
-    QmlJSGrammar::EOF_SYMBOL
+    QQmlJSGrammar::EOF_SYMBOL
 };
 static inline bool isUriToken(int token)
 {
     const int *current = uriTokens;
-    while (*current != QmlJSGrammar::EOF_SYMBOL) {
+    while (*current != QQmlJSGrammar::EOF_SYMBOL) {
         if (*current == token)
             return true;
         ++current;
@@ -1303,7 +1303,7 @@
 
         if (! (directiveName == QLatin1String("pragma") ||
                directiveName == QLatin1String("import"))) {
-            error->message = QCoreApplication::translate("QmlParser", "Syntax error.");
+            error->message = QCoreApplication::translate("QQmlParser", "Syntax error");
             error->loc.startLine = tokenStartLine();
             error->loc.startColumn = tokenStartColumn();
             return false; // not a valid directive name
@@ -1313,7 +1313,7 @@
         if (directiveName == QLatin1String("pragma")) {
             // .pragma library
             if (! (lex() == T_IDENTIFIER && tokenText() == QLatin1String("library"))) {
-                error->message = QCoreApplication::translate("QmlParser", "Syntax error.");
+                error->message = QCoreApplication::translate("QQmlParser", "Syntax error");
                 error->loc.startLine = tokenStartLine();
                 error->loc.startColumn = tokenStartColumn();
                 return false; // expected `library
@@ -1337,7 +1337,7 @@
                 pathOrUri = tokenText();
 
                 if (!pathOrUri.endsWith(QLatin1String("js"))) {
-                    error->message = QCoreApplication::translate("QmlParser","Imported file must be a script.");
+                    error->message = QCoreApplication::translate("QQmlParser","Imported file must be a script");
                     error->loc.startLine = tokenStartLine();
                     error->loc.startColumn = tokenStartColumn();
                     return false;
@@ -1348,7 +1348,7 @@
 
                 while (true) {
                     if (!isUriToken(_tokenKind)) {
-                        error->message = QCoreApplication::translate("QmlParser","Invalid module URI.");
+                        error->message = QCoreApplication::translate("QQmlParser","Invalid module URI");
                         error->loc.startLine = tokenStartLine();
                         error->loc.startColumn = tokenStartColumn();
                         return false;
@@ -1358,19 +1358,19 @@
 
                     lex();
                     if (tokenStartLine() != lineNumber) {
-                        error->message = QCoreApplication::translate("QmlParser","Invalid module URI.");
+                        error->message = QCoreApplication::translate("QQmlParser","Invalid module URI");
                         error->loc.startLine = tokenStartLine();
                         error->loc.startColumn = tokenStartColumn();
                         return false;
                     }
-                    if (_tokenKind != QmlJSGrammar::T_DOT)
+                    if (_tokenKind != QQmlJSGrammar::T_DOT)
                         break;
 
                     pathOrUri.append(QLatin1Char('.'));
 
                     lex();
                     if (tokenStartLine() != lineNumber) {
-                        error->message = QCoreApplication::translate("QmlParser","Invalid module URI.");
+                        error->message = QCoreApplication::translate("QQmlParser","Invalid module URI");
                         error->loc.startLine = tokenStartLine();
                         error->loc.startColumn = tokenStartColumn();
                         return false;
@@ -1378,7 +1378,7 @@
                 }
 
                 if (_tokenKind != T_NUMERIC_LITERAL) {
-                    error->message = QCoreApplication::translate("QmlParser","Module import requires a version.");
+                    error->message = QCoreApplication::translate("QQmlParser","Module import requires a version");
                     error->loc.startLine = tokenStartLine();
                     error->loc.startColumn = tokenStartColumn();
                     return false; // expected the module version number
@@ -1392,9 +1392,9 @@
             //
             if (! (lex() == T_IDENTIFIER && tokenText() == QLatin1String("as") && tokenStartLine() == lineNumber)) {
                 if (fileImport)
-                    error->message = QCoreApplication::translate("QmlParser", "File import requires a qualifier.");
+                    error->message = QCoreApplication::translate("QQmlParser", "File import requires a qualifier");
                 else
-                    error->message = QCoreApplication::translate("QmlParser", "Module import requires a qualifier.");
+                    error->message = QCoreApplication::translate("QQmlParser", "Module import requires a qualifier");
                 if (tokenStartLine() != lineNumber) {
                     error->loc.startLine = lineNumber;
                     error->loc.startColumn = column;
@@ -1407,9 +1407,9 @@
 
             if (lex() != T_IDENTIFIER || tokenStartLine() != lineNumber) {
                 if (fileImport)
-                    error->message = QCoreApplication::translate("QmlParser", "File import requires a qualifier.");
+                    error->message = QCoreApplication::translate("QQmlParser", "File import requires a qualifier");
                 else
-                    error->message = QCoreApplication::translate("QmlParser", "Module import requires a qualifier.");
+                    error->message = QCoreApplication::translate("QQmlParser", "Module import requires a qualifier");
                 error->loc.startLine = tokenStartLine();
                 error->loc.startColumn = tokenStartColumn();
                 return false; // expected module name
@@ -1417,7 +1417,7 @@
 
             const QString module = tokenText();
             if (!module.at(0).isUpper()) {
-                error->message = QCoreApplication::translate("QmlParser","Invalid import qualifier.");
+                error->message = QCoreApplication::translate("QQmlParser","Invalid import qualifier");
                 error->loc.startLine = tokenStartLine();
                 error->loc.startColumn = tokenStartColumn();
                 return false;
@@ -1430,7 +1430,7 @@
         }
 
         if (tokenStartLine() != lineNumber) {
-            error->message = QCoreApplication::translate("QmlParser", "Syntax error.");
+            error->message = QCoreApplication::translate("QQmlParser", "Syntax error");
             error->loc.startLine = tokenStartLine();
             error->loc.startColumn = tokenStartColumn();
             return false; // the directives cannot span over multiple lines
diff -bur ./qmljslexer_p.h ../declarative/parser/qmljslexer_p.h
--- ./qmljslexer_p.h	2018-04-01 19:29:22.775987200 +0300
+++ ../declarative/parser/qmljslexer_p.h	2018-03-31 00:00:07.584202900 +0300
@@ -37,8 +37,8 @@
 **
 ****************************************************************************/
 
-#ifndef QMLJSLEXER_P_H
-#define QMLJSLEXER_P_H
+#ifndef QQMLJSLEXER_P_H
+#define QQMLJSLEXER_P_H
 
 //
 //  W A R N I N G
@@ -51,14 +51,14 @@
 // We mean it.
 //
 
-#include "qmljsglobal_p.h"
-#include "qmljsgrammar_p.h"
+#include "qqmljsglobal_p.h"
+#include "qqmljsgrammar_p.h"
 
 #include <QtCore/qstring.h>
 
 QT_QML_BEGIN_NAMESPACE
 
-namespace QmlJS {
+namespace QQmlJS {
 
 class Engine;
 class DiagnosticMessage;
@@ -89,7 +89,7 @@
     }
 };
 
-class QML_PARSER_EXPORT Lexer: public QmlJSGrammar
+class QML_PARSER_EXPORT Lexer: public QQmlJSGrammar
 {
 public:
     enum {
@@ -249,8 +249,8 @@
     bool _qmlMode;
 };
 
-} // end of namespace QmlJS
+} // end of namespace QQmlJS
 
 QT_QML_END_NAMESPACE
 
-#endif
+#endif // LEXER_H
diff -bur ./qmljsmemorypool_p.h ../declarative/parser/qmljsmemorypool_p.h
--- ./qmljsmemorypool_p.h	2018-04-01 19:30:14.455070000 +0300
+++ ../declarative/parser/qmljsmemorypool_p.h	2018-03-31 00:00:07.584703100 +0300
@@ -37,8 +37,8 @@
 **
 ****************************************************************************/
 
-#ifndef QMLJSMEMORYPOOL_P_H
-#define QMLJSMEMORYPOOL_P_H
+#ifndef QQMLJSMEMORYPOOL_P_H
+#define QQMLJSMEMORYPOOL_P_H
 
 //
 //  W A R N I N G
@@ -51,7 +51,7 @@
 // We mean it.
 //
 
-#include "qmljsglobal_p.h"
+#include "qqmljsglobal_p.h"
 
 #include <QtCore/qglobal.h>
 #include <QtCore/qshareddata.h>
@@ -61,7 +61,7 @@
 
 QT_QML_BEGIN_NAMESPACE
 
-namespace QmlJS {
+namespace QQmlJS {
 
 class Managed;
 
@@ -94,7 +94,7 @@
     inline void *allocate(size_t size)
     {
         size = (size + 7) & ~7;
-        if (_ptr && (_ptr + size < _end)) {
+        if (Q_LIKELY(_ptr && (_ptr + size < _end))) {
             void *addr = _ptr;
             _ptr += size;
             return addr;
@@ -111,7 +111,7 @@
     template <typename Tp> Tp *New() { return new (this->allocate(sizeof(Tp))) Tp(); }
 
 private:
-    void *allocate_helper(size_t size)
+    Q_NEVER_INLINE void *allocate_helper(size_t size)
     {
         Q_ASSERT(size < BLOCK_SIZE);
 
@@ -168,7 +168,7 @@
     void operator delete(void *, MemoryPool *) {}
 };
 
-} // namespace QmlJS
+} // namespace QQmlJS
 
 QT_QML_END_NAMESPACE
 
diff -bur ./qmljsparser.cpp ../declarative/parser/qmljsparser.cpp
--- ./qmljsparser.cpp	2018-04-01 19:31:53.311149000 +0300
+++ ../declarative/parser/qmljsparser.cpp	2018-03-31 00:00:07.585704500 +0300
@@ -37,10 +37,10 @@
 **
 ****************************************************************************/
 
-#include "qmljsengine_p.h"
-#include "qmljslexer_p.h"
-#include "qmljsast_p.h"
-#include "qmljsmemorypool_p.h"
+#include "qqmljsengine_p.h"
+#include "qqmljslexer_p.h"
+#include "qqmljsast_p.h"
+#include "qqmljsmemorypool_p.h"
 
 #include <QtCore/qdebug.h>
 #include <QtCore/qcoreapplication.h>
@@ -49,7 +49,7 @@
 
 
 
-#include "qmljsparser_p.h"
+#include "qqmljsparser_p.h"
 
 #include <QtCore/qvarlengtharray.h>
 
@@ -57,15 +57,15 @@
 //  W A R N I N G
 //  -------------
 //
-// This file is automatically generated from qmljs.g.
+// This file is automatically generated from qqmljs.g.
 // Changes should be made to that file, not here. Any change to this file will
 // be lost!
 //
 // To regenerate this file, run:
-//    qlalr --no-debug --no-lines --qt qmljs.g
+//    qlalr --no-debug --no-lines --qt qqmljs.g
 //
 
-using namespace QmlJS;
+using namespace QQmlJS;
 
 QT_QML_BEGIN_NAMESPACE
 
@@ -325,7 +325,7 @@
     if (node) {
         node->pragmaToken = loc(1);
     } else {
-       diagnostic_messages.append(DiagnosticMessage(Severity::Error, loc(1),
+       diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, loc(1),
          QLatin1String("Expected a qualified name id")));
 
         return false; // ### remove me
@@ -348,7 +348,7 @@
     if (node) {
         node->importToken = loc(1);
     } else {
-       diagnostic_messages.append(DiagnosticMessage(Severity::Error, loc(1),
+       diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, loc(1),
          QLatin1String("Expected a qualified name id or a string literal")));
 
         return false; // ### remove me
@@ -664,7 +664,7 @@
 case 88: {
   bool rx = lexer->scanRegExp(Lexer::NoPrefix);
   if (!rx) {
-    diagnostic_messages.append(DiagnosticMessage(Severity::Error, location(lexer), lexer->errorMessage()));
+    diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, location(lexer), lexer->errorMessage()));
     return false; // ### remove me
   }
 
@@ -680,7 +680,7 @@
 case 89: {
   bool rx = lexer->scanRegExp(Lexer::EqualPrefix);
   if (!rx) {
-    diagnostic_messages.append(DiagnosticMessage(Severity::Error, location(lexer), lexer->errorMessage()));
+    diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, location(lexer), lexer->errorMessage()));
     return false;
   }
 
@@ -761,7 +761,7 @@
 
 case 98: {
   if (AST::ArrayMemberExpression *mem = AST::cast<AST::ArrayMemberExpression *>(sym(1).Expression)) {
-    diagnostic_messages.append(DiagnosticMessage(Severity::Warning, mem->lbracketToken,
+    diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Warning, mem->lbracketToken,
       QLatin1String("Ignored annotation")));
 
     sym(1).Expression = mem->base;
@@ -772,7 +772,7 @@
   } else {
     sym(1).UiQualifiedId = 0;
 
-    diagnostic_messages.append(DiagnosticMessage(Severity::Error, loc(1),
+    diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, loc(1),
       QLatin1String("Expected a qualified name id")));
 
     return false; // ### recover
@@ -1813,8 +1813,8 @@
             yylloc.startColumn += yylloc.length;
             yylloc.length = 0;
 
-            //const QString msg = QCoreApplication::translate("QmlParser", "Missing \";\".");
-            //diagnostic_messages.append(DiagnosticMessage(Severity::Warning, yylloc, msg));
+            //const QString msg = QCoreApplication::translate("QQmlParser", "Missing `;'");
+            //diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Warning, yylloc, msg));
 
             first_token = &token_buffer[0];
             last_token = &token_buffer[1];
@@ -1843,10 +1843,10 @@
             QString msg;
             int token = token_buffer[0].token;
             if (token < 0 || token >= TERMINAL_COUNT)
-                msg = QCoreApplication::translate("QmlParser", "Syntax error.");
+                msg = QCoreApplication::translate("QQmlParser", "Syntax error");
             else
-                msg = QCoreApplication::translate("QmlParser", "Unexpected token \"%1\".").arg(QLatin1String(spell[token]));
-            diagnostic_messages.append(DiagnosticMessage(Severity::Error, token_buffer[0].loc, msg));
+                msg = QCoreApplication::translate("QQmlParser", "Unexpected token `%1'").arg(QLatin1String(spell[token]));
+            diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, token_buffer[0].loc, msg));
 
             action = errorState;
             goto _Lcheck_token;
@@ -1873,8 +1873,8 @@
         for (int *tk = tokens; *tk != EOF_SYMBOL; ++tk) {
             int a = t_action(errorState, *tk);
             if (a > 0 && t_action(a, yytoken)) {
-                const QString msg = QCoreApplication::translate("QmlParser", "Expected token \"%1\".").arg(QLatin1String(spell[*tk]));
-                diagnostic_messages.append(DiagnosticMessage(Severity::Error, token_buffer[0].loc, msg));
+                const QString msg = QCoreApplication::translate("QQmlParser", "Expected token `%1'").arg(QLatin1String(spell[*tk]));
+                diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, token_buffer[0].loc, msg));
 
                 yytoken = *tk;
                 yylval = 0;
@@ -1897,8 +1897,8 @@
 
             int a = t_action(errorState, tk);
             if (a > 0 && t_action(a, yytoken)) {
-                const QString msg = QCoreApplication::translate("QmlParser", "Expected token \"%1\".").arg(QLatin1String(spell[tk]));
-                diagnostic_messages.append(DiagnosticMessage(Severity::Error, token_buffer[0].loc, msg));
+                const QString msg = QCoreApplication::translate("QQmlParser", "Expected token `%1'").arg(QLatin1String(spell[tk]));
+                diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, token_buffer[0].loc, msg));
 
                 yytoken = tk;
                 yylval = 0;
@@ -1910,8 +1910,8 @@
             }
         }
 
-        const QString msg = QCoreApplication::translate("QmlParser", "Syntax error.");
-        diagnostic_messages.append(DiagnosticMessage(Severity::Error, token_buffer[0].loc, msg));
+        const QString msg = QCoreApplication::translate("QQmlParser", "Syntax error");
+        diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, token_buffer[0].loc, msg));
     }
 
     return false;
diff -bur ./qmljsparser_p.h ../declarative/parser/qmljsparser_p.h
--- ./qmljsparser_p.h	2018-04-01 19:30:57.682004300 +0300
+++ ../declarative/parser/qmljsparser_p.h	2018-03-31 00:00:07.586703100 +0300
@@ -37,8 +37,6 @@
 **
 ****************************************************************************/
 
-#ifndef QMLJSPARSER_P_H
-#define QMLJSPARSER_P_H
 
 //
 //  W A R N I N G
@@ -55,29 +53,32 @@
 //  W A R N I N G
 //  -------------
 //
-// This file is automatically generated from qmljs.g.
+// This file is automatically generated from qqmljs.g.
 // Changes should be made to that file, not here. Any change to this file will
 // be lost!
 //
 // To regenerate this file, run:
-//    qlalr --no-debug --no-lines --qt qmljs.g
+//    qlalr --no-debug --no-lines --qt qqmljs.g
 //
 
-#include "qmljsglobal_p.h"
-#include "qmljsgrammar_p.h"
-#include "qmljsast_p.h"
-#include "qmljsengine_p.h"
+#ifndef QQMLJSPARSER_P_H
+#define QQMLJSPARSER_P_H
+
+#include "qqmljsglobal_p.h"
+#include "qqmljsgrammar_p.h"
+#include "qqmljsast_p.h"
+#include "qqmljsengine_p.h"
 
 #include <QtCore/qlist.h>
 #include <QtCore/qstring.h>
 
 QT_QML_BEGIN_NAMESPACE
 
-namespace QmlJS {
+namespace QQmlJS {
 
 class Engine;
 
-class QML_PARSER_EXPORT Parser: protected QmlJSGrammar
+class QML_PARSER_EXPORT Parser: protected QQmlJSGrammar
 {
 public:
     union Value {
@@ -173,8 +174,8 @@
 
     inline DiagnosticMessage diagnosticMessage() const
     {
-        foreach (const DiagnosticMessage &d, diagnostic_messages) {
-            if (d.kind != Severity::Warning)
+        for (const DiagnosticMessage &d : diagnostic_messages) {
+            if (d.kind != DiagnosticMessage::Warning)
                 return d;
         }
 
@@ -241,7 +242,7 @@
     QList<DiagnosticMessage> diagnostic_messages;
 };
 
-} // end of namespace QmlJS
+} // end of namespace QQmlJS
 
 
 
@@ -251,4 +252,6 @@
 
 QT_QML_END_NAMESPACE
 
-#endif
+
+
+#endif // QQMLJSPARSER_P_H
