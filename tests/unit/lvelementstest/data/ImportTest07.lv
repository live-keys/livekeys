// This file holds a dependency cycle between module files within a plugin
// plugin1: A <- B <- C <- A


////// plugin1/live.plugin.json

{
    "name" : "plugin1",
    "package": ".",
    "modules": ["A", "B", "C"]
}

////// plugin1/live.package.json

{
    "name" : "plugin1",
    "version" : "1.0.0"
}

////// plugin1/A.lv

component default < B{}

////// plugin1/A.lv.js

var B = imports.get("B")

module.exports["A"] = class A extends B{

    constructor(){
        super()
        this.__initialize()
    }

    __initialize(){}

}

////// plugin1/B.lv

component default < C{}

////// plugin1/B.lv.js

var C = imports.get("C")

module.exports["B"] = class B extends C{

    constructor(){
        super()
        this.__initialize()
    }

    __initialize(){}
}

////// plugin1/C.lv

component default < A{}

////// plugin1/C.lv.js

var A = imports.get("A")

module.exports["C"] = class C extends A{

    constructor(){
        super()
        this.__initialize()
    }

    __initialize(){}
}

////// main.lv

import .plugin1

component default < Element{
    string a : {
        return (new A()).toString()
    }
}

////// main.lv.js

imports.require(".plugin1")

var A = imports.get("A")

module.exports["main"] = class main extends Element{
    constructor(){
        super()
        this.__initialize()
    }

    __initialize(){
        Element.addProperty(this, 'a', { type: "string", notify: "aChanged" })
        this.a = (function(){
            return (new A()).toString()
        }())
    }

}
