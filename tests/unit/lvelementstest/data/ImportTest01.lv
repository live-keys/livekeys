// This file holds a simple import of a plugin from a main file.

////// plugin1/live.plugin.json

{
    "name" : "plugin1",
    "package": ".",
    "modules": ["A", "B"]
}

////// plugin1/live.package.json

{
    "name" : "plugin1",
    "version" : "1.0.0"
}

////// plugin1/A.lv

component default < Element{
    fn toString(){
        return "class[A]"
    }
}

////// plugin1/A.lv.js

module.exports["A"] = class A extends Element{

    constructor(){
        super()
        this.__initialize()
    }

    __initialize(){
        //Element.assignDefaultProperty(null)
    }

    toString()
    {
        return "class[A]"
    }
}


////// plugin1/B.lv

component default < Element{
    fn toString(){
        return "class[B]"
    }
}

////// plugin1/B.lv.js

module.exports["B"] = class B extends Element{

    constructor(){
        super()
        this.__initialize()
    }

    __initialize(){
        //Element.assignDefaultProperty(null)
    }

    toString()
    {
        return "class[B]"
    }
}

////// main.lv

import .plugin1

component default < Element{
    string a : {
        return (new A()).toString()
    }
    string b : {
        return (new B()).toString()
    }
}

////// main.lv.js

imports.require(".plugin1")

var A = imports.get("A")
var B = imports.get("B")

module.exports["main"] = class main extends Element{
    constructor(){
        super()
        this.__initialize()
    }

    __initialize(){
        Element.addProperty(this, 'a', { type: "string", notify: "aChanged" })
        Element.addProperty(this, 'b', { type: "string", notify: "bChanged" })

        this.a = (function(){
            return (new A()).toString()
        }())

        this.b = (function(){
            return (new B()).toString()
        }())

        //Element.assignDefaultProperty(null)

    }
}
