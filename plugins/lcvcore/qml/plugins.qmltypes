import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'Livekeys 1.6.1'

Module {
    dependencies: []
    Component {
        name: "QAbsDiff"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvcore/AbsDiff 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "input2"; type: "QMat"; isPointer: true }
    }
    Component {
        name: "QAlphaMerge"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvcore/AlphaMerge 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "mask"; type: "QMat"; isPointer: true }
    }
    Component {
        name: "QCamCapture"
        defaultProperty: "data"
        prototype: "QMatDisplay"
        exports: ["lcvcore/CamCapture 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "device"; type: "QString"; isReadonly: true }
        Property { name: "resolution"; type: "QSize"; isReadonly: true }
        Property { name: "paused"; type: "bool" }
        Property { name: "fps"; type: "double" }
        Signal { name: "init" }
        Method { name: "switchMat" }
        Method {
            name: "staticOpen"
            Parameter { name: "device"; type: "QString" }
            Parameter { name: "resolution"; type: "QSize" }
        }
        Method {
            name: "staticOpen"
            Parameter { name: "device"; type: "QString" }
        }
        Method {
            name: "staticLoad"
            Parameter { name: "device"; type: "QString" }
            Parameter { name: "resolution"; type: "QSize" }
        }
        Method {
            name: "staticLoad"
            Parameter { name: "device"; type: "QString" }
        }
    }
    Component {
        name: "QColorHistogram"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvcore/ColorHistogram 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Selection"
            values: {
                "Total": -2,
                "AllChannels": -1,
                "BlueChannel": 0,
                "GreenChannel": 1,
                "RedChannel": 2
            }
        }
        Property { name: "input"; type: "QMat"; isPointer: true }
        Property { name: "output"; type: "QMat"; isReadonly: true; isPointer: true }
        Property { name: "fill"; type: "bool" }
        Property { name: "channel"; type: "int" }
    }
    Component {
        name: "QDrawHistogram"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvcore/DrawHistogram 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "RenderType"
            values: {
                "ConnectedLines": 0,
                "Rectangles": 1,
                "Binary": 2,
                "BinaryConverted": 3
            }
        }
        Property { name: "values"; type: "QVariantList" }
        Property { name: "colors"; type: "QVariantList" }
        Property { name: "maxValue"; type: "double" }
        Property { name: "render"; type: "RenderType" }
        Method {
            name: "setValuesFromIntList"
            Parameter { name: "values"; type: "QList<int>" }
        }
        Method {
            name: "setValuesFromIntListAt"
            Parameter { name: "values"; type: "QList<int>" }
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "QGradient"
        prototype: "QObject"
        exports: ["lcvcore/Gradient 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "draw"
            Parameter { name: "result"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "p1"; type: "QPointF" }
            Parameter { name: "p2"; type: "QPointF" }
            Parameter { name: "c1"; type: "QColor" }
            Parameter { name: "c2"; type: "QColor" }
        }
    }
    Component {
        name: "QImRead"
        defaultProperty: "data"
        prototype: "QMatDisplay"
        exports: ["lcvcore/ImRead 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Load"
            values: {
                "CV_LOAD_IMAGE_UNCHANGED": -1,
                "CV_LOAD_IMAGE_GRAYSCALE": 0,
                "CV_LOAD_IMAGE_COLOR": 1,
                "CV_LOAD_IMAGE_ANYDEPTH": 2,
                "CV_LOAD_IMAGE_ANYCOLOR": 4
            }
        }
        Property { name: "file"; type: "QString" }
        Property { name: "iscolor"; type: "int" }
    }
    Component {
        name: "QImWrite"
        prototype: "QObject"
        exports: ["lcvcore/ImWrite 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "params"; type: "QJSValue" }
        Method {
            name: "saveImage"
            type: "bool"
            Parameter { name: "file"; type: "QString" }
            Parameter { name: "image"; type: "QMat"; isPointer: true }
        }
    }
    Component {
        name: "QImageFile"
        defaultProperty: "data"
        prototype: "QMatDisplay"
        exports: ["lcvcore/ImageFile 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Load"
            values: {
                "CV_LOAD_IMAGE_UNCHANGED": -1,
                "CV_LOAD_IMAGE_GRAYSCALE": 0,
                "CV_LOAD_IMAGE_COLOR": 1,
                "CV_LOAD_IMAGE_ANYDEPTH": 2,
                "CV_LOAD_IMAGE_ANYCOLOR": 4
            }
        }
        Property { name: "source"; type: "QString" }
        Property { name: "iscolor"; type: "int" }
        Property { name: "monitor"; type: "bool" }
        Signal { name: "init" }
        Method {
            name: "systemFileChanged"
            Parameter { name: "file"; type: "QString" }
        }
        Method {
            name: "open"
            Parameter { name: "file"; type: "QString" }
        }
    }
    Component {
        name: "QImageView"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvcore/ImageView 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "image"; type: "QMat"; isPointer: true }
        Property { name: "linearFilter"; type: "bool" }
    }
    Component {
        name: "QItemCapture"
        defaultProperty: "data"
        prototype: "QMatDisplay"
        exports: ["lcvcore/ItemCapture 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "captureSource"; type: "QQuickItem"; isPointer: true }
        Signal {
            name: "captureIsReady"
            Parameter { name: "size"; type: "QSize" }
        }
        Method { name: "capture" }
        Method {
            name: "captureReady"
            Parameter { name: "size"; type: "QSize" }
        }
        Method {
            name: "windowAttached"
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Method { name: "grabImage" }
    }
    Component {
        name: "QMat"
        prototype: "QObject"
        exports: ["lcvcore/Mat 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "CV8U": 0,
                "CV8S": 1,
                "CV16U": 2,
                "CV16S": 3,
                "CV32S": 4,
                "CV32F": 5,
                "CV64F": 6
            }
        }
        Method { name: "buffer"; type: "QByteArray" }
        Method { name: "channels"; type: "int" }
        Method { name: "depth"; type: "int" }
        Method { name: "dimensions"; type: "QSize" }
        Method { name: "createOwnedObject"; type: "QMat*" }
        Method { name: "cloneMat"; type: "QMat*" }
    }
    Component {
        name: "QMatBuffer"
        defaultProperty: "data"
        prototype: "QMatDisplay"
        exports: ["lcvcore/MatBuffer 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "input"; type: "QMat"; isPointer: true }
    }
    Component {
        name: "QMatDisplay"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Property { name: "output"; type: "QMat"; isReadonly: true; isPointer: true }
        Property { name: "linearFilter"; type: "bool" }
    }
    Component {
        name: "QMatFilter"
        defaultProperty: "data"
        prototype: "QMatDisplay"
        Property { name: "input"; type: "QMat"; isPointer: true }
    }
    Component {
        name: "QMatIO"
        prototype: "QObject"
        exports: ["lcvcore/MatIO 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Load"
            values: {
                "CV_LOAD_IMAGE_UNCHANGED": -1,
                "CV_LOAD_IMAGE_GRAYSCALE": 0,
                "CV_LOAD_IMAGE_COLOR": 1,
                "CV_LOAD_IMAGE_ANYDEPTH": 2,
                "CV_LOAD_IMAGE_ANYCOLOR": 4
            }
        }
        Method {
            name: "read"
            type: "QMat*"
            Parameter { name: "path"; type: "QString" }
            Parameter { name: "isColor"; type: "int" }
        }
        Method {
            name: "read"
            type: "QMat*"
            Parameter { name: "path"; type: "QString" }
        }
        Method {
            name: "decode"
            type: "QMat*"
            Parameter { name: "bytes"; type: "QByteArray" }
            Parameter { name: "isColor"; type: "int" }
        }
        Method {
            name: "decode"
            type: "QMat*"
            Parameter { name: "bytes"; type: "QByteArray" }
        }
    }
    Component {
        name: "QMatLoader"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvcore/MatLoader 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "staticLoad"
            type: "QMat*"
            Parameter { name: "id"; type: "QString" }
            Parameter { name: "params"; type: "QJSValue" }
        }
    }
    Component {
        name: "QMatOp"
        prototype: "QObject"
        exports: ["lcvcore/MatOp 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "nullMat"; type: "QMat"; isReadonly: true; isPointer: true }
        Method {
            name: "createMatList"
            type: "lv::QmlObjectList*"
            Parameter { name: "matArray"; type: "QJSValue" }
        }
        Method { name: "createMatList"; type: "lv::QmlObjectList*" }
        Method {
            name: "create"
            type: "QMat*"
            Parameter { name: "size"; type: "QSize" }
            Parameter { name: "type"; type: "int" }
            Parameter { name: "channels"; type: "int" }
        }
        Method {
            name: "create"
            type: "QMat*"
            Parameter { name: "size"; type: "QSize" }
            Parameter { name: "type"; type: "int" }
        }
        Method {
            name: "create"
            type: "QMat*"
            Parameter { name: "size"; type: "QSize" }
        }
        Method {
            name: "createFill"
            type: "QMat*"
            Parameter { name: "size"; type: "QSize" }
            Parameter { name: "type"; type: "int" }
            Parameter { name: "channels"; type: "int" }
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "createFromArray"
            type: "QMat*"
            Parameter { name: "a"; type: "QVariantList" }
            Parameter { name: "type"; type: "int" }
        }
        Method {
            name: "createFromArray"
            type: "QMat*"
            Parameter { name: "a"; type: "QVariantList" }
        }
        Method {
            name: "createWritable"
            type: "QWritableMat*"
            Parameter { name: "size"; type: "QSize" }
            Parameter { name: "type"; type: "int" }
            Parameter { name: "channels"; type: "int" }
        }
        Method {
            name: "createWritable"
            type: "QWritableMat*"
            Parameter { name: "size"; type: "QSize" }
            Parameter { name: "type"; type: "int" }
        }
        Method {
            name: "createWritable"
            type: "QWritableMat*"
            Parameter { name: "size"; type: "QSize" }
        }
        Method {
            name: "createWritableFill"
            type: "QWritableMat*"
            Parameter { name: "size"; type: "QSize" }
            Parameter { name: "type"; type: "int" }
            Parameter { name: "channels"; type: "int" }
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "createWritableFromMat"
            type: "QWritableMat*"
            Parameter { name: "m"; type: "QMat"; isPointer: true }
        }
        Method {
            name: "fill"
            Parameter { name: "m"; type: "QMat"; isPointer: true }
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "fillWithMask"
            Parameter { name: "m"; type: "QMat"; isPointer: true }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "mask"; type: "QMat"; isPointer: true }
        }
        Method {
            name: "reloc"
            type: "QMat*"
            Parameter { name: "m"; type: "QMat"; isPointer: true }
        }
        Method {
            name: "crop"
            type: "QMat*"
            Parameter { name: "m"; type: "QMat"; isPointer: true }
            Parameter { name: "region"; type: "QRect" }
        }
        Method {
            name: "flip"
            type: "QMat*"
            Parameter { name: "m"; type: "QMat"; isPointer: true }
            Parameter { name: "direction"; type: "int" }
        }
        Method {
            name: "to4x4Matrix"
            type: "QMatrix4x4"
            Parameter { name: "m"; type: "QMat"; isPointer: true }
        }
        Method {
            name: "toArray"
            type: "QVariantList"
            Parameter { name: "m"; type: "QMat"; isPointer: true }
        }
        Method {
            name: "bitwiseXor"
            type: "QMat*"
            Parameter { name: "arg1"; type: "QMat"; isPointer: true }
            Parameter { name: "arg2"; type: "QMat"; isPointer: true }
        }
        Method {
            name: "bitwiseOr"
            type: "QMat*"
            Parameter { name: "arg1"; type: "QMat"; isPointer: true }
            Parameter { name: "arg2"; type: "QMat"; isPointer: true }
        }
        Method {
            name: "bitwiseAnd"
            type: "QMat*"
            Parameter { name: "arg1"; type: "QMat"; isPointer: true }
            Parameter { name: "arg2"; type: "QMat"; isPointer: true }
        }
        Method {
            name: "bitwiseNot"
            type: "QMat*"
            Parameter { name: "arg"; type: "QMat"; isPointer: true }
        }
    }
    Component {
        name: "QMatRead"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvcore/MatRead 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "input"; type: "QMat"; isPointer: true }
        Property { name: "font"; type: "QFont" }
        Property { name: "color"; type: "QColor" }
        Property { name: "numberWidth"; type: "int" }
        Property { name: "squareCell"; type: "bool" }
    }
    Component {
        name: "QMatRoi"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvcore/Crop 1.0", "lcvcore/MatRoi 1.0"]
        exportMetaObjectRevisions: [0, 0]
        Property { name: "regionX"; type: "int" }
        Property { name: "regionY"; type: "int" }
        Property { name: "regionWidth"; type: "int" }
        Property { name: "regionHeight"; type: "int" }
    }
    Component {
        name: "QMatView"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvcore/MatView 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "mat"; type: "QMat"; isPointer: true }
        Property { name: "linearFilter"; type: "bool" }
        Signal {
            name: "matChanged"
            Parameter { name: "arg"; type: "QMat"; isPointer: true }
        }
    }
    Component {
        name: "QOverlapMat"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvcore/OverlapMat 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "input2"; type: "QMat"; isPointer: true }
        Property { name: "mask"; type: "QMat"; isPointer: true }
    }
    Component {
        name: "QVideoCapture"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvcore/VideoCapture 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "output"; type: "QMat"; isReadonly: true; isPointer: true }
        Property { name: "totalFrames"; type: "int"; isReadonly: true }
        Property { name: "file"; type: "QString"; isReadonly: true }
        Property { name: "linearFilter"; type: "bool" }
        Property { name: "paused"; type: "bool" }
        Property { name: "fps"; type: "double" }
        Property { name: "currentFrame"; type: "int" }
        Property { name: "loop"; type: "bool" }
        Signal { name: "outChanged" }
        Signal { name: "init" }
        Method { name: "switchMat" }
        Method {
            name: "seekTo"
            Parameter { name: "frame"; type: "int" }
        }
        Method {
            name: "staticLoad"
            Parameter { name: "file"; type: "QString" }
        }
        Method {
            name: "staticOpen"
            Parameter { name: "file"; type: "QString" }
        }
    }
    Component {
        name: "QVideoDecoder"
        prototype: "QObject"
        exports: ["lcvcore/VideoDecoder 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "totalFrames"; type: "int"; isReadonly: true }
        Property { name: "file"; type: "QString"; isReadonly: true }
        Property { name: "stream"; type: "lv::QmlStream"; isReadonly: true; isPointer: true }
        Property { name: "paused"; type: "bool" }
        Property { name: "fps"; type: "double" }
        Property { name: "currentFrame"; type: "int" }
        Property { name: "loop"; type: "bool" }
        Method { name: "__matReady" }
        Method {
            name: "seekTo"
            Parameter { name: "frame"; type: "int" }
        }
        Method {
            name: "run"
            type: "lv::QmlStream*"
            Parameter { name: "file"; type: "QString" }
        }
    }
    Component {
        name: "QVideoWriter"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvcore/VideoWriter 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "input"; type: "QMat"; isPointer: true }
        Property { name: "framesWritten"; type: "int"; isReadonly: true }
        Method {
            name: "staticLoad"
            Parameter { name: "params"; type: "QJSValue" }
        }
        Method {
            name: "setInput"
            Parameter { name: "input"; type: "QMat"; isPointer: true }
        }
        Method { name: "save" }
        Method {
            name: "write"
            Parameter { name: "image"; type: "QMat"; isPointer: true }
        }
    }
    Component {
        name: "QWritableMat"
        prototype: "QObject"
        exports: ["lcvcore/WritableMat 1.0"]
        exportMetaObjectRevisions: [0]
        Method { name: "buffer"; type: "QByteArray" }
        Method { name: "channels"; type: "int" }
        Method { name: "depth"; type: "int" }
        Method { name: "dimensions"; type: "QSize" }
        Method { name: "toMat"; type: "QMat*" }
        Method {
            name: "fill"
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "mask"; type: "QMat"; isPointer: true }
        }
    }
    Component {
        name: "lv::Segment"
        prototype: "QObject"
        Property { name: "position"; type: "uint" }
        Property { name: "length"; type: "uint" }
        Property { name: "maxStretchLeft"; type: "uint" }
        Property { name: "maxStretchRight"; type: "uint" }
        Property { name: "label"; type: "QString" }
        Property { name: "color"; type: "QColor" }
        Method { name: "remove" }
        Method { name: "segmentModel"; type: "lv::SegmentModel*" }
        Method {
            name: "stretchLeftTo"
            Parameter { name: "position"; type: "uint" }
        }
        Method {
            name: "stretchRightTo"
            Parameter { name: "position"; type: "uint" }
        }
    }
    Component {
        name: "lv::VideoSegment"
        prototype: "lv::Segment"
        exports: ["lcvcore/VideoSegment 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "surface"; type: "lv::VideoSurface"; isPointer: true }
        Property { name: "file"; type: "QString" }
        Method {
            name: "setFile"
            Parameter { name: "file"; type: "QString" }
        }
    }
    Component {
        name: "lv::VideoSurface"
        defaultProperty: "data"
        prototype: "QMatDisplay"
        exports: ["lcvcore/VideoSurface 1.0"]
        exportMetaObjectRevisions: [0]
    }
}
