import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'Livekeys 1.6.0'

Module {
    dependencies: []
    Component {
        name: "QBriskDescriptorExtractor"
        defaultProperty: "data"
        prototype: "QDescriptorExtractor"
        exports: ["lcvfeatures2d/BriskDescriptorExtractor 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QBriskFeatureDetector"
        defaultProperty: "data"
        prototype: "QFeatureDetector"
        exports: ["lcvfeatures2d/BriskFeatureDetector 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QBruteForceMatcher"
        defaultProperty: "data"
        prototype: "QDescriptorMatcher"
        exports: ["lcvfeatures2d/BruteForceMatcher 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "NormType"
            values: {
                "NORM_L1": 2,
                "NORM_L2": 4,
                "NORM_HAMMING": 6,
                "NORM_HAMMING2": 7
            }
        }
    }
    Component {
        name: "QDMatchVector"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvfeatures2d/DMatchVector 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QDescriptorExtractor"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvfeatures2d/DescriptorExtractor 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "keypoints"; type: "QKeyPointVector"; isPointer: true }
        Property { name: "descriptors"; type: "QMat"; isReadonly: true; isPointer: true }
        Property { name: "params"; type: "QVariantMap" }
        Property { name: "isBinary"; type: "bool"; isReadonly: true }
        Method { name: "compute" }
        Method {
            name: "setParams"
            Parameter { name: "arg"; type: "QVariantMap" }
        }
    }
    Component {
        name: "QDescriptorMatchFilter"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvfeatures2d/DescriptorMatchFilter 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "matches1to2"; type: "QDMatchVector"; isPointer: true }
        Property { name: "matches1to2Out"; type: "QDMatchVector"; isReadonly: true; isPointer: true }
        Property { name: "minDistanceCoeff"; type: "float" }
        Property { name: "maxDistance"; type: "float" }
        Property { name: "nndrRatio"; type: "float" }
    }
    Component {
        name: "QDescriptorMatcher"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvfeatures2d/DescriptorMatcher 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "queryDescriptors"; type: "QMat"; isPointer: true }
        Property { name: "matches"; type: "QDMatchVector"; isReadonly: true; isPointer: true }
        Property { name: "params"; type: "QVariantMap" }
        Property { name: "knn"; type: "int" }
        Method {
            name: "add"
            Parameter { name: "descriptors"; type: "QMat"; isPointer: true }
        }
        Method { name: "train" }
        Method {
            name: "match"
            Parameter { name: "queryDescriptors"; type: "QMat"; isPointer: true }
            Parameter { name: "matches"; type: "QDMatchVector"; isPointer: true }
        }
        Method {
            name: "knnMatch"
            Parameter { name: "queryDescriptors"; type: "QMat"; isPointer: true }
            Parameter { name: "matches"; type: "QDMatchVector"; isPointer: true }
            Parameter { name: "k"; type: "int" }
        }
        Method {
            name: "knnMatch"
            Parameter { name: "queryDescriptors"; type: "QMat"; isPointer: true }
            Parameter { name: "matches"; type: "QDMatchVector"; isPointer: true }
        }
        Method {
            name: "setParams"
            Parameter { name: "arg"; type: "QVariantMap" }
        }
    }
    Component {
        name: "QDrawMatches"
        defaultProperty: "data"
        prototype: "QMatDisplay"
        exports: ["lcvfeatures2d/DrawMatches 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "keypoints1"; type: "QKeyPointVector"; isPointer: true }
        Property { name: "keypoints2"; type: "QKeyPointVector"; isPointer: true }
        Property { name: "matches1to2"; type: "QDMatchVector"; isPointer: true }
        Property { name: "matchIndex"; type: "int" }
    }
    Component {
        name: "QFastFeatureDetector"
        defaultProperty: "data"
        prototype: "QFeatureDetector"
        exports: ["lcvfeatures2d/FastFeatureDetector 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QFeatureDetector"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvfeatures2d/FeatureDetector 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "input"; type: "QMat"; isPointer: true }
        Property { name: "output"; type: "QMat"; isReadonly: true; isPointer: true }
        Property { name: "mask"; type: "QMat"; isPointer: true }
        Property { name: "params"; type: "QVariantMap" }
        Property { name: "keypoints"; type: "QKeyPointVector"; isPointer: true }
        Method {
            name: "setParams"
            Parameter { name: "arg"; type: "QVariantMap" }
        }
    }
    Component {
        name: "QFlannBasedMatcher"
        defaultProperty: "data"
        prototype: "QDescriptorMatcher"
        exports: ["lcvfeatures2d/FlannBasedMatcher 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QKeyPoint"
        prototype: "QObject"
        exports: ["lcvfeatures2d/KeyPoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "pt"; type: "QPointF" }
        Property { name: "size"; type: "float" }
        Property { name: "angle"; type: "float" }
        Property { name: "response"; type: "float" }
        Property { name: "octave"; type: "int" }
        Property { name: "classId"; type: "int" }
    }
    Component {
        name: "QKeyPointToSceneMap"
        prototype: "QObject"
        exports: ["lcvfeatures2d/KeypointToSceneMap 1.0"]
        exportMetaObjectRevisions: [0]
        Method { name: "size"; type: "int" }
    }
    Component {
        name: "QKeyPointVector"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvfeatures2d/KeyPointVector 1.0"]
        exportMetaObjectRevisions: [0]
        Method { name: "createOwnedObject"; type: "QKeyPointVector*" }
        Method { name: "keyPointData"; type: "QList<QObject*>" }
        Method {
            name: "setKeyPointData"
            Parameter { name: "data"; type: "QList<QObject*>" }
        }
        Method {
            name: "appendKeyPoint"
            Parameter { name: "pt"; type: "QKeyPoint"; isPointer: true }
        }
        Method {
            name: "removeKeyPoint"
            Parameter { name: "position"; type: "int" }
        }
        Method { name: "createKeyPoint"; type: "QKeyPoint*" }
        Method { name: "size"; type: "int" }
    }
    Component {
        name: "QKeypointHomography"
        defaultProperty: "data"
        prototype: "QMatDisplay"
        exports: ["lcvfeatures2d/KeypointHomography 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "keypointsToScene"; type: "QKeyPointToSceneMap"; isPointer: true }
        Property { name: "queryImage"; type: "QMat"; isPointer: true }
        Property { name: "objectCorners"; type: "QVariantList" }
        Property { name: "objectColors"; type: "QVariantList" }
        Signal {
            name: "objectColorsChanged"
            Parameter { name: "arg"; type: "QVariantList" }
        }
        Method {
            name: "setQueryImage"
            Parameter { name: "queryImage"; type: "QMat"; isPointer: true }
        }
        Method {
            name: "setObjectCorners"
            Parameter { name: "arg"; type: "QVariantList" }
        }
        Method {
            name: "appendObjectCorners"
            Parameter { name: "corner"; type: "QVariantList" }
        }
    }
    Component {
        name: "QMSerFeatureDetector"
        defaultProperty: "data"
        prototype: "QFeatureDetector"
        exports: ["lcvfeatures2d/MSerFeatureDetector 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "initialize"
            Parameter { name: "settings"; type: "QVariantMap" }
        }
    }
    Component {
        name: "QMatDisplay"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Property { name: "output"; type: "QMat"; isReadonly: true; isPointer: true }
        Property { name: "linearFilter"; type: "bool" }
    }
    Component {
        name: "QMatchesToLocalKeypoint"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvfeatures2d/MatchesToLocalKeypoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "matches1to2"; type: "QDMatchVector"; isPointer: true }
        Property { name: "trainKeypointVectors"; type: "QList<QObject*>" }
        Property { name: "queryKeypointVector"; type: "QKeyPointVector"; isPointer: true }
        Property { name: "output"; type: "QKeyPointToSceneMap"; isReadonly: true; isPointer: true }
        Method {
            name: "setMatches1to2"
            Parameter { name: "arg"; type: "QDMatchVector"; isPointer: true }
        }
        Method {
            name: "setTrainKeypointVectors"
            Parameter { name: "arg"; type: "QList<QObject*>" }
        }
        Method {
            name: "setQueryKeypointVector"
            Parameter { name: "arg"; type: "QKeyPointVector"; isPointer: true }
        }
        Method {
            name: "setQueryWithMatches"
            Parameter { name: "query"; type: "QKeyPointVector"; isPointer: true }
            Parameter { name: "matches"; type: "QDMatchVector"; isPointer: true }
        }
    }
    Component {
        name: "QOrbDescriptorExtractor"
        defaultProperty: "data"
        prototype: "QDescriptorExtractor"
        exports: ["lcvfeatures2d/OrbDescriptorExtractor 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QOrbFeatureDetector"
        defaultProperty: "data"
        prototype: "QFeatureDetector"
        exports: ["lcvfeatures2d/OrbFeatureDetector 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ScoreType"
            values: {
                "kBytes": 32,
                "HARRIS_SCORE": 0,
                "FAST_SCORE": 1
            }
        }
        Method {
            name: "initialize"
            Parameter { name: "settings"; type: "QVariantMap" }
        }
    }
    Component {
        name: "QSimpleBlobDetector"
        defaultProperty: "data"
        prototype: "QFeatureDetector"
        exports: ["lcvfeatures2d/SimpleBlobDetector 1.0"]
        exportMetaObjectRevisions: [0]
    }
}
