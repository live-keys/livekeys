import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'Livekeys 1.6.0'

Module {
    dependencies: []
    Component {
        name: "QBlur"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvimgproc/Blur 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "ksize"; type: "QSize" }
        Property { name: "anchor"; type: "QPoint" }
        Property { name: "borderType"; type: "int" }
        Method { name: "ksize" }
        Method {
            name: "setKsize"
            Parameter { name: "ksize"; type: "QSize" }
        }
        Method { name: "anchor" }
        Method {
            name: "setAnchor"
            Parameter { name: "anchor"; type: "QPoint" }
        }
        Method { name: "borderType"; type: "int" }
        Method {
            name: "setBorderType"
            Parameter { name: "borderType"; type: "int" }
        }
    }
    Component {
        name: "QCachedWarpPerspective"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvimgproc/CachedWarpPerspective 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "output"; type: "QMat"; isPointer: true }
        Property { name: "input"; type: "QMat"; isPointer: true }
        Property { name: "m"; type: "QMat"; isPointer: true }
        Property { name: "interpolation"; type: "int" }
    }
    Component {
        name: "QCanny"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvimgproc/Canny 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "threshold1"; type: "double" }
        Property { name: "threshold2"; type: "double" }
        Property { name: "apertureSize"; type: "int" }
        Property { name: "l2gradient"; type: "bool" }
    }
    Component {
        name: "QChannelSelect"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvimgproc/ChannelSelect 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "channel"; type: "int" }
    }
    Component {
        name: "QCopyMakeBorder"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvimgproc/CopyMakeBorder 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "BorderType"
            values: {
                "BORDER_REPLICATE": 1,
                "BORDER_CONSTANT": 0,
                "BORDER_REFLECT": 2,
                "BORDER_WRAP": 3,
                "BORDER_REFLECT_101": 4,
                "BORDER_TRANSPARENT": 5,
                "BORDER_DEFAULT": 4,
                "BORDER_ISOLATED": 16
            }
        }
        Property { name: "top"; type: "int" }
        Property { name: "bottom"; type: "int" }
        Property { name: "left"; type: "int" }
        Property { name: "right"; type: "int" }
        Property { name: "borderType"; type: "int" }
        Property { name: "color"; type: "QColor" }
    }
    Component {
        name: "QCvtColor"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvimgproc/CvtColor 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "CvtType"
            values: {
                "CV_BGR2BGRA": 0,
                "CV_RGB2RGBA": 0,
                "CV_BGRA2BGR": 1,
                "CV_RGBA2RGB": 1,
                "CV_BGR2RGBA": 2,
                "CV_RGB2BGRA": 2,
                "CV_RGBA2BGR": 3,
                "CV_BGRA2RGB": 3,
                "CV_BGR2RGB": 4,
                "CV_RGB2BGR": 4,
                "CV_BGRA2RGBA": 5,
                "CV_RGBA2BGRA": 5,
                "CV_BGR2GRAY": 6,
                "CV_RGB2GRAY": 7,
                "CV_GRAY2BGR": 8,
                "CV_GRAY2RGB": 8,
                "CV_GRAY2BGRA": 9,
                "CV_GRAY2RGBA": 9,
                "CV_BGRA2GRAY": 10,
                "CV_RGBA2GRAY": 11,
                "CV_BGR2BGR565": 12,
                "CV_RGB2BGR565": 13,
                "CV_BGR5652BGR": 14,
                "CV_BGR5652RGB": 15,
                "CV_BGRA2BGR565": 16,
                "CV_RGBA2BGR565": 17,
                "CV_BGR5652BGRA": 18,
                "CV_BGR5652RGBA": 19,
                "CV_GRAY2BGR565": 20,
                "CV_BGR5652GRAY": 21,
                "CV_BGR2BGR555": 22,
                "CV_RGB2BGR555": 23,
                "CV_BGR5552BGR": 24,
                "CV_BGR5552RGB": 25,
                "CV_BGRA2BGR555": 26,
                "CV_RGBA2BGR555": 27,
                "CV_BGR5552BGRA": 28,
                "CV_BGR5552RGBA": 29,
                "CV_GRAY2BGR555": 30,
                "CV_BGR5552GRAY": 31,
                "CV_BGR2XYZ": 32,
                "CV_RGB2XYZ": 33,
                "CV_XYZ2BGR": 34,
                "CV_XYZ2RGB": 35,
                "CV_BGR2YCrCb": 36,
                "CV_RGB2YCrCb": 37,
                "CV_YCrCb2BGR": 38,
                "CV_YCrCb2RGB": 39,
                "CV_BGR2HSV": 40,
                "CV_RGB2HSV": 41,
                "CV_BGR2Lab": 44,
                "CV_RGB2Lab": 45,
                "CV_BayerBG2BGR": 46,
                "CV_BayerGB2BGR": 47,
                "CV_BayerRG2BGR": 48,
                "CV_BayerGR2BGR": 49,
                "CV_BayerBG2RGB": 48,
                "CV_BayerGB2RGB": 49,
                "CV_BayerRG2RGB": 46,
                "CV_BayerGR2RGB": 47,
                "CV_BGR2Luv": 50,
                "CV_RGB2Luv": 51,
                "CV_BGR2HLS": 52,
                "CV_RGB2HLS": 53,
                "CV_HSV2BGR": 54,
                "CV_HSV2RGB": 55,
                "CV_Lab2BGR": 56,
                "CV_Lab2RGB": 57,
                "CV_Luv2BGR": 58,
                "CV_Luv2RGB": 59,
                "CV_HLS2BGR": 60,
                "CV_HLS2RGB": 61,
                "CV_BayerBG2BGR_VNG": 62,
                "CV_BayerGB2BGR_VNG": 63,
                "CV_BayerRG2BGR_VNG": 64,
                "CV_BayerGR2BGR_VNG": 65,
                "CV_BayerBG2RGB_VNG": 64,
                "CV_BayerGB2RGB_VNG": 65,
                "CV_BayerRG2RGB_VNG": 62,
                "CV_BayerGR2RGB_VNG": 63,
                "CV_BGR2HSV_FULL": 66,
                "CV_RGB2HSV_FULL": 67,
                "CV_BGR2HLS_FULL": 68,
                "CV_RGB2HLS_FULL": 69,
                "CV_HSV2BGR_FULL": 70,
                "CV_HSV2RGB_FULL": 71,
                "CV_HLS2BGR_FULL": 72,
                "CV_HLS2RGB_FULL": 73,
                "CV_LBGR2Lab": 74,
                "CV_LRGB2Lab": 75,
                "CV_LBGR2Luv": 76,
                "CV_LRGB2Luv": 77,
                "CV_Lab2LBGR": 78,
                "CV_Lab2LRGB": 79,
                "CV_Luv2LBGR": 80,
                "CV_Luv2LRGB": 81,
                "CV_BGR2YUV": 82,
                "CV_RGB2YUV": 83,
                "CV_YUV2BGR": 84,
                "CV_YUV2RGB": 85,
                "CV_BayerBG2GRAY": 86,
                "CV_BayerGB2GRAY": 87,
                "CV_BayerRG2GRAY": 88,
                "CV_BayerGR2GRAY": 89,
                "CV_YUV2RGB_NV12": 90,
                "CV_YUV2BGR_NV12": 91,
                "CV_YUV2RGB_NV21": 92,
                "CV_YUV2BGR_NV21": 93,
                "CV_YUV420sp2RGB": 92,
                "CV_YUV420sp2BGR": 93,
                "CV_YUV2RGBA_NV12": 94,
                "CV_YUV2BGRA_NV12": 95,
                "CV_YUV2RGBA_NV21": 96,
                "CV_YUV2BGRA_NV21": 97,
                "CV_YUV420sp2RGBA": 96,
                "CV_YUV420sp2BGRA": 97,
                "CV_YUV2RGB_YV12": 98,
                "CV_YUV2BGR_YV12": 99,
                "CV_YUV2RGB_IYUV": 100,
                "CV_YUV2BGR_IYUV": 101,
                "CV_YUV2RGB_I420": 100,
                "CV_YUV2BGR_I420": 101,
                "CV_YUV420p2RGB": 98,
                "CV_YUV420p2BGR": 99,
                "CV_YUV2RGBA_YV12": 102,
                "CV_YUV2BGRA_YV12": 103,
                "CV_YUV2RGBA_IYUV": 104,
                "CV_YUV2BGRA_IYUV": 105,
                "CV_YUV2RGBA_I420": 104,
                "CV_YUV2BGRA_I420": 105,
                "CV_YUV420p2RGBA": 102,
                "CV_YUV420p2BGRA": 103,
                "CV_YUV2GRAY_420": 106,
                "CV_YUV2GRAY_NV21": 106,
                "CV_YUV2GRAY_NV12": 106,
                "CV_YUV2GRAY_YV12": 106,
                "CV_YUV2GRAY_IYUV": 106,
                "CV_YUV2GRAY_I420": 106,
                "CV_YUV420sp2GRAY": 106,
                "CV_YUV420p2GRAY": 106,
                "CV_YUV2RGB_UYVY": 107,
                "CV_YUV2BGR_UYVY": 108,
                "CV_YUV2RGB_Y422": 107,
                "CV_YUV2BGR_Y422": 108,
                "CV_YUV2RGB_UYNV": 107,
                "CV_YUV2BGR_UYNV": 108,
                "CV_YUV2RGBA_UYVY": 111,
                "CV_YUV2BGRA_UYVY": 112,
                "CV_YUV2RGBA_Y422": 111,
                "CV_YUV2BGRA_Y422": 112,
                "CV_YUV2RGBA_UYNV": 111,
                "CV_YUV2BGRA_UYNV": 112,
                "CV_YUV2RGB_YUY2": 115,
                "CV_YUV2BGR_YUY2": 116,
                "CV_YUV2RGB_YVYU": 117,
                "CV_YUV2BGR_YVYU": 118,
                "CV_YUV2RGB_YUYV": 115,
                "CV_YUV2BGR_YUYV": 116,
                "CV_YUV2RGB_YUNV": 115,
                "CV_YUV2BGR_YUNV": 116,
                "CV_YUV2RGBA_YUY2": 119,
                "CV_YUV2BGRA_YUY2": 120,
                "CV_YUV2RGBA_YVYU": 121,
                "CV_YUV2BGRA_YVYU": 122,
                "CV_YUV2RGBA_YUYV": 119,
                "CV_YUV2BGRA_YUYV": 120,
                "CV_YUV2RGBA_YUNV": 119,
                "CV_YUV2BGRA_YUNV": 120,
                "CV_YUV2GRAY_UYVY": 123,
                "CV_YUV2GRAY_YUY2": 124,
                "CV_YUV2GRAY_Y422": 123,
                "CV_YUV2GRAY_UYNV": 123,
                "CV_YUV2GRAY_YVYU": 124,
                "CV_YUV2GRAY_YUYV": 124,
                "CV_YUV2GRAY_YUNV": 124,
                "CV_RGBA2mRGBA": 125,
                "CV_mRGBA2RGBA": 126,
                "CV_COLORCVT_MAX": 127
            }
        }
        Property { name: "code"; type: "CvtType" }
        Property { name: "dstCn"; type: "int" }
    }
    Component {
        name: "QDilate"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvimgproc/Dilate 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "kernel"; type: "QMat"; isPointer: true }
        Property { name: "anchor"; type: "QPoint" }
        Property { name: "iterations"; type: "int" }
        Property { name: "borderType"; type: "int" }
        Property { name: "borderValue"; type: "QColor" }
    }
    Component {
        name: "QDraw"
        prototype: "QObject"
        exports: ["lcvimgproc/Draw 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "line"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "p1"; type: "QPoint" }
            Parameter { name: "p2"; type: "QPoint" }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "thickness"; type: "int" }
            Parameter { name: "lineType"; type: "int" }
            Parameter { name: "shift"; type: "int" }
        }
        Method {
            name: "line"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "p1"; type: "QPoint" }
            Parameter { name: "p2"; type: "QPoint" }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "thickness"; type: "int" }
            Parameter { name: "lineType"; type: "int" }
        }
        Method {
            name: "line"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "p1"; type: "QPoint" }
            Parameter { name: "p2"; type: "QPoint" }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "thickness"; type: "int" }
        }
        Method {
            name: "line"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "p1"; type: "QPoint" }
            Parameter { name: "p2"; type: "QPoint" }
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "rectangle"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "p1"; type: "QPoint" }
            Parameter { name: "p2"; type: "QPoint" }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "thickness"; type: "int" }
            Parameter { name: "lineType"; type: "int" }
            Parameter { name: "shift"; type: "int" }
        }
        Method {
            name: "rectangle"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "p1"; type: "QPoint" }
            Parameter { name: "p2"; type: "QPoint" }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "thickness"; type: "int" }
            Parameter { name: "lineType"; type: "int" }
        }
        Method {
            name: "rectangle"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "p1"; type: "QPoint" }
            Parameter { name: "p2"; type: "QPoint" }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "thickness"; type: "int" }
        }
        Method {
            name: "rectangle"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "p1"; type: "QPoint" }
            Parameter { name: "p2"; type: "QPoint" }
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "circle"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "center"; type: "QPoint" }
            Parameter { name: "radius"; type: "int" }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "thickness"; type: "int" }
            Parameter { name: "lineType"; type: "int" }
            Parameter { name: "shift"; type: "int" }
        }
        Method {
            name: "circle"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "center"; type: "QPoint" }
            Parameter { name: "radius"; type: "int" }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "thickness"; type: "int" }
            Parameter { name: "lineType"; type: "int" }
        }
        Method {
            name: "circle"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "center"; type: "QPoint" }
            Parameter { name: "radius"; type: "int" }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "thickness"; type: "int" }
        }
        Method {
            name: "circle"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "center"; type: "QPoint" }
            Parameter { name: "radius"; type: "int" }
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "ellipse"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "center"; type: "QPoint" }
            Parameter { name: "axes"; type: "QSize" }
            Parameter { name: "angle"; type: "double" }
            Parameter { name: "startAngle"; type: "double" }
            Parameter { name: "endAngle"; type: "double" }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "thickness"; type: "int" }
            Parameter { name: "lineType"; type: "int" }
            Parameter { name: "shift"; type: "int" }
        }
        Method {
            name: "ellipse"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "center"; type: "QPoint" }
            Parameter { name: "axes"; type: "QSize" }
            Parameter { name: "angle"; type: "double" }
            Parameter { name: "startAngle"; type: "double" }
            Parameter { name: "endAngle"; type: "double" }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "thickness"; type: "int" }
            Parameter { name: "lineType"; type: "int" }
        }
        Method {
            name: "ellipse"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "center"; type: "QPoint" }
            Parameter { name: "axes"; type: "QSize" }
            Parameter { name: "angle"; type: "double" }
            Parameter { name: "startAngle"; type: "double" }
            Parameter { name: "endAngle"; type: "double" }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "thickness"; type: "int" }
        }
        Method {
            name: "ellipse"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "center"; type: "QPoint" }
            Parameter { name: "axes"; type: "QSize" }
            Parameter { name: "angle"; type: "double" }
            Parameter { name: "startAngle"; type: "double" }
            Parameter { name: "endAngle"; type: "double" }
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "fillPoly"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "points"; type: "QVariantList" }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "lineType"; type: "int" }
            Parameter { name: "shift"; type: "int" }
            Parameter { name: "offset"; type: "QPoint" }
        }
        Method {
            name: "fillPoly"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "points"; type: "QVariantList" }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "lineType"; type: "int" }
            Parameter { name: "shift"; type: "int" }
        }
        Method {
            name: "fillPoly"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "points"; type: "QVariantList" }
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "lineType"; type: "int" }
        }
        Method {
            name: "fillPoly"
            Parameter { name: "surface"; type: "QWritableMat"; isPointer: true }
            Parameter { name: "points"; type: "QVariantList" }
            Parameter { name: "color"; type: "QColor" }
        }
    }
    Component {
        name: "QErode"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvimgproc/Erode 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "kernel"; type: "QMat"; isPointer: true }
        Property { name: "anchor"; type: "QPoint" }
        Property { name: "iterations"; type: "int" }
        Property { name: "borderType"; type: "int" }
        Property { name: "borderValue"; type: "QColor" }
    }
    Component {
        name: "QFilter2D"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvimgproc/Filter2D 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "ddepth"; type: "int" }
        Property { name: "kernel"; type: "QMat"; isPointer: true }
        Property { name: "anchor"; type: "QPoint" }
        Property { name: "delta"; type: "double" }
        Property { name: "borderType"; type: "int" }
    }
    Component {
        name: "QGaussianBlur"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvimgproc/GaussianBlur 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "ksize"; type: "QSize" }
        Property { name: "sigmaX"; type: "double" }
        Property { name: "sigmaY"; type: "double" }
        Property { name: "borderType"; type: "int" }
    }
    Component {
        name: "QGeometry"
        prototype: "QObject"
        exports: ["lcvimgproc/Geometry 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Interpolation"
            values: {
                "INTER_NEAREST": 0,
                "INTER_LINEAR": 1,
                "INTER_CUBIC": 2,
                "INTER_AREA": 3,
                "INTER_LANCZOS4": 4,
                "INTER_MAX": 7,
                "WARP_INVERSE_MAP": 16
            }
        }
        Method {
            name: "resize"
            type: "QMat*"
            Parameter { name: "input"; type: "QMat"; isPointer: true }
            Parameter { name: "size"; type: "QSize" }
            Parameter { name: "interpolation"; type: "int" }
        }
        Method {
            name: "scale"
            type: "QMat*"
            Parameter { name: "input"; type: "QMat"; isPointer: true }
            Parameter { name: "fx"; type: "double" }
            Parameter { name: "fy"; type: "double" }
            Parameter { name: "interpolation"; type: "int" }
        }
        Method {
            name: "resizeBy"
            type: "QMat*"
            Parameter { name: "input"; type: "QMat"; isPointer: true }
            Parameter { name: "ob"; type: "QJSValue" }
            Parameter { name: "interpolation"; type: "int" }
        }
        Method {
            name: "getPerspectiveTransform"
            type: "QMat*"
            Parameter { name: "src"; type: "QVariantList" }
            Parameter { name: "dst"; type: "QVariantList" }
        }
        Method {
            name: "applyPerspectiveTransform"
            type: "QVariantList"
            Parameter { name: "points"; type: "QVariantList" }
            Parameter { name: "warp"; type: "QMat"; isPointer: true }
        }
        Method {
            name: "warpTriangles"
            Parameter { name: "src"; type: "QMat"; isPointer: true }
            Parameter { name: "dst"; type: "QMat"; isPointer: true }
            Parameter { name: "triangles1"; type: "QVariantList" }
            Parameter { name: "triangles2"; type: "QVariantList" }
        }
    }
    Component {
        name: "QGetPerspectiveTransform"
        prototype: "QObject"
        exports: ["lcvimgproc/GetPerspectiveTransform 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "src"; type: "lv::QmlVariantList"; isPointer: true }
        Property { name: "dst"; type: "lv::QmlVariantList"; isPointer: true }
        Property { name: "output"; type: "QMat"; isPointer: true }
        Method {
            name: "setSrc"
            Parameter { name: "src"; type: "lv::QmlVariantList"; isPointer: true }
        }
        Method {
            name: "setDst"
            Parameter { name: "dst"; type: "lv::QmlVariantList"; isPointer: true }
        }
        Method {
            name: "setOutput"
            Parameter { name: "output"; type: "QMat"; isPointer: true }
        }
    }
    Component {
        name: "QTransformImage"
        defaultProperty: "items"
        prototype: "QObject"
        exports: ["lcvimgproc/TransformImage 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "input"; type: "QObject" }
        Property { name: "result"; type: "QJSValue"; isReadonly: true }
        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "QHoughLines"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvimgproc/HoughLines 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "rho"; type: "double" }
        Property { name: "theta"; type: "double" }
        Property { name: "threshold"; type: "int" }
        Property { name: "srn"; type: "double" }
        Property { name: "stn"; type: "double" }
        Property { name: "lineColor"; type: "QColor" }
        Property { name: "lineThickness"; type: "int" }
    }
    Component {
        name: "QHoughLinesP"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvimgproc/HoughLinesP 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "rho"; type: "double" }
        Property { name: "theta"; type: "double" }
        Property { name: "threshold"; type: "int" }
        Property { name: "minLineLength"; type: "double" }
        Property { name: "maxLineGap"; type: "double" }
        Property { name: "lineColor"; type: "QColor" }
        Property { name: "lineThickness"; type: "int" }
    }
    Component {
        name: "QMatDisplay"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Property { name: "output"; type: "QMat"; isReadonly: true; isPointer: true }
        Property { name: "linearFilter"; type: "bool" }
    }
    Component {
        name: "QMatFilter"
        defaultProperty: "data"
        prototype: "QMatDisplay"
        Property { name: "input"; type: "QMat"; isPointer: true }
    }
    Component {
        name: "QMatResize"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvimgproc/Resize 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Interpolation"
            values: {
                "INTER_NEAREST": 0,
                "INTER_LINEAR": 1,
                "INTER_CUBIC": 2,
                "INTER_AREA": 3,
                "INTER_LANCZOS4": 4,
                "INTER_MAX": 7,
                "WARP_INVERSE_MAP": 16
            }
        }
        Property { name: "matSize"; type: "QSize" }
        Property { name: "fx"; type: "double" }
        Property { name: "fy"; type: "double" }
        Property { name: "interpolation"; type: "int" }
    }
    Component {
        name: "QShapeDescriptors"
        prototype: "QObject"
        exports: ["lcvimgproc/ShapeDescriptors 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "convexHullIndices"
            type: "QVariantList"
            Parameter { name: "points"; type: "QVariantList" }
        }
        Method {
            name: "DelaunayTriangles"
            type: "QVariantList"
            Parameter { name: "rectSize"; type: "QSize" }
            Parameter { name: "points"; type: "QVariantList" }
        }
        Method {
            name: "getMaskFromHullPoints"
            type: "QMat*"
            Parameter { name: "points"; type: "QVariantList" }
            Parameter { name: "size"; type: "QSize" }
            Parameter { name: "depth"; type: "int" }
        }
    }
    Component {
        name: "QSobel"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvimgproc/Sobel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "ddepth"; type: "QMat::Type" }
        Property { name: "xorder"; type: "int" }
        Property { name: "yorder"; type: "int" }
        Property { name: "ksize"; type: "int" }
        Property { name: "scale"; type: "double" }
        Property { name: "delta"; type: "double" }
        Property { name: "borderType"; type: "int" }
        Signal { name: "scaleChagned" }
    }
    Component {
        name: "QStructuringElement"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvimgproc/StructuringElement 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ElementShape"
            values: {
                "MORPH_RECT": 0,
                "MORPH_ELLIPSE": 2,
                "MORPH_CROSS": 1
            }
        }
        Property { name: "shape"; type: "ElementShape" }
        Property { name: "ksize"; type: "QSize" }
        Property { name: "anchor"; type: "QPoint" }
        Property { name: "output"; type: "QMat"; isPointer: true }
    }
    Component {
        name: "QThreshold"
        defaultProperty: "data"
        prototype: "QMatFilter"
        exports: ["lcvimgproc/Threshold 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "BINARY": 0,
                "BINARY_INV": 1,
                "TRUNC": 2,
                "TOZERO": 3,
                "TOZERO_INV": 4,
                "OTSU": 8
            }
        }
        Property { name: "thresh"; type: "double" }
        Property { name: "maxVal"; type: "double" }
        Property { name: "thresholdType"; type: "QThreshold::Type" }
    }
    Component {
        name: "QWarpPerspective"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["lcvimgproc/WarpPerspective 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "output"; type: "QMat"; isPointer: true }
        Property { name: "input"; type: "QMat"; isPointer: true }
        Property { name: "m"; type: "QMat"; isPointer: true }
        Property { name: "interpolation"; type: "int" }
        Property { name: "borderMode"; type: "int" }
        Property { name: "borderValue"; type: "QColor" }
    }
}
