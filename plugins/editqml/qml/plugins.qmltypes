import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'Livekeys 1.8.0'

Module {
    dependencies: []
    Component {
        name: "lv::CodeQmlHandler"
        prototype: "QObject"
        exports: ["editqml/CodeQmlHandler 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "numberOfConnections"; type: "int"; isReadonly: true }
        Signal { name: "importsScanned" }
        Method { name: "__whenLibraryScanQueueCleared" }
        Method { name: "areImportsScanned"; type: "bool" }
        Method {
            name: "onDocumentParse"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "onImportsScanned"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method { name: "removeSyncImportsListeners" }
        Method { name: "languageFeatures"; type: "QList<int>" }
        Method {
            name: "populateNestedObjectsForFragment"
            Parameter { name: "ef"; type: "lv::QmlEditFragment"; isPointer: true }
        }
        Method {
            name: "populateObjectInfoForFragment"
            Parameter { name: "ef"; type: "lv::QmlEditFragment"; isPointer: true }
        }
        Method {
            name: "populatePropertyInfoForFragment"
            Parameter { name: "ef"; type: "lv::QmlEditFragment"; isPointer: true }
        }
        Method {
            name: "testFunction"
            Parameter { name: "list"; type: "QVariantList" }
        }
        Method {
            name: "help"
            type: "QString"
            Parameter { name: "position"; type: "int" }
        }
        Method {
            name: "findObjectFragmentByPosition"
            type: "lv::QmlEditFragment*"
            Parameter { name: "position"; type: "int" }
        }
        Method {
            name: "findFragmentByPosition"
            type: "lv::QmlEditFragment*"
            Parameter { name: "position"; type: "int" }
        }
        Method { name: "editingFragments"; type: "QJSValue" }
        Method {
            name: "toggleComment"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "length"; type: "int" }
        }
        Method {
            name: "cursorInfo"
            type: "QJSValue"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "length"; type: "int" }
        }
        Method {
            name: "isInImports"
            type: "bool"
            Parameter { name: "position"; type: "int" }
        }
        Method {
            name: "openConnection"
            type: "lv::QmlEditFragment*"
            Parameter { name: "position"; type: "int" }
        }
        Method {
            name: "openNestedConnection"
            type: "lv::QmlEditFragment*"
            Parameter { name: "edit"; type: "lv::QmlEditFragment"; isPointer: true }
            Parameter { name: "position"; type: "int" }
        }
        Method {
            name: "openNestedObjects"
            type: "QList<QObject*>"
            Parameter { name: "edit"; type: "lv::QmlEditFragment"; isPointer: true }
        }
        Method {
            name: "openNestedProperties"
            type: "QList<QObject*>"
            Parameter { name: "edit"; type: "lv::QmlEditFragment"; isPointer: true }
        }
        Method {
            name: "removeConnection"
            Parameter { name: "edit"; type: "lv::QmlEditFragment"; isPointer: true }
        }
        Method {
            name: "deleteObject"
            Parameter { name: "edit"; type: "lv::QmlEditFragment"; isPointer: true }
        }
        Method {
            name: "propertyType"
            type: "QString"
            Parameter { name: "edit"; type: "lv::QmlEditFragment"; isPointer: true }
            Parameter { name: "propertyName"; type: "QString" }
        }
        Method {
            name: "findPalettes"
            type: "lv::PaletteList*"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "includeExpandables"; type: "bool" }
        }
        Method {
            name: "findPalettes"
            type: "lv::PaletteList*"
            Parameter { name: "position"; type: "int" }
        }
        Method {
            name: "findPalettes"
            type: "lv::PaletteList*"
            Parameter { name: "position"; type: "int" }
        }
        Method {
            name: "openPalette"
            type: "QJSValue"
            Parameter { name: "fragment"; type: "lv::QmlEditFragment"; isPointer: true }
            Parameter { name: "palette"; type: "lv::PaletteList"; isPointer: true }
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "removePalette"
            type: "lv::QmlEditFragment*"
            Parameter { name: "palette"; type: "lv::CodePalette"; isPointer: true }
        }
        Method {
            name: "defaultPalette"
            type: "QString"
            Parameter { name: "fragment"; type: "lv::QmlEditFragment"; isPointer: true }
        }
        Method {
            name: "openBinding"
            type: "lv::CodePalette*"
            Parameter { name: "edit"; type: "lv::QmlEditFragment"; isPointer: true }
            Parameter { name: "paletteList"; type: "lv::PaletteList"; isPointer: true }
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "closeBinding"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "length"; type: "int" }
        }
        Method {
            name: "expand"
            type: "QJSValue"
            Parameter { name: "edit"; type: "lv::QmlEditFragment"; isPointer: true }
            Parameter { name: "val"; type: "QJSValue" }
        }
        Method {
            name: "isForAnObject"
            type: "bool"
            Parameter { name: "palette"; type: "lv::QmlEditFragment"; isPointer: true }
        }
        Method {
            name: "frameEdit"
            Parameter { name: "box"; type: "QQuickItem"; isPointer: true }
            Parameter { name: "palette"; type: "lv::QmlEditFragment"; isPointer: true }
        }
        Method {
            name: "contextBlockRange"
            type: "QJSValue"
            Parameter { name: "cursorPosition"; type: "int" }
        }
        Method { name: "importsModel"; type: "lv::QmlImportsModel*" }
        Method {
            name: "addLineAtPosition"
            Parameter { name: "line"; type: "QString" }
            Parameter { name: "pos"; type: "int" }
        }
        Method {
            name: "removeLineAtPosition"
            Parameter { name: "pos"; type: "int" }
        }
        Method { name: "removeAllEditingFragments" }
        Method {
            name: "findImportsPosition"
            type: "int"
            Parameter { name: "blockPos"; type: "int" }
        }
        Method { name: "findRootPosition"; type: "int" }
        Method {
            name: "edit"
            type: "lv::CodePalette*"
            Parameter { name: "ef"; type: "lv::QmlEditFragment"; isPointer: true }
        }
        Method { name: "cancelEdit" }
        Method {
            name: "getAddOptions"
            type: "lv::QmlAddContainer*"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "includeFunctions"; type: "bool" }
        }
        Method {
            name: "getAddOptions"
            type: "lv::QmlAddContainer*"
            Parameter { name: "position"; type: "int" }
        }
        Method {
            name: "addProperty"
            type: "int"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "object"; type: "QString" }
            Parameter { name: "type"; type: "QString" }
            Parameter { name: "name"; type: "QString" }
            Parameter { name: "assignDefault"; type: "bool" }
        }
        Method {
            name: "addProperty"
            type: "int"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "object"; type: "QString" }
            Parameter { name: "type"; type: "QString" }
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "addItem"
            type: "int"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "object"; type: "QString" }
            Parameter { name: "type"; type: "QString" }
        }
        Method {
            name: "insertRootItem"
            type: "int"
            Parameter { name: "ctype"; type: "QString" }
        }
        Method {
            name: "addEvent"
            type: "int"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "object"; type: "QString" }
            Parameter { name: "type"; type: "QString" }
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "addItemToRuntime"
            Parameter { name: "edit"; type: "lv::QmlEditFragment"; isPointer: true }
            Parameter { name: "type"; type: "QString" }
            Parameter { name: "currentApp"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "addItemToRuntime"
            Parameter { name: "edit"; type: "lv::QmlEditFragment"; isPointer: true }
            Parameter { name: "type"; type: "QString" }
        }
        Method { name: "updateRuntimeBindings" }
        Method {
            name: "createObject"
            type: "lv::QmlEditFragment*"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "type"; type: "QString" }
            Parameter { name: "parent"; type: "lv::QmlEditFragment"; isPointer: true }
            Parameter { name: "currentApp"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "createObject"
            type: "lv::QmlEditFragment*"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "type"; type: "QString" }
            Parameter { name: "parent"; type: "lv::QmlEditFragment"; isPointer: true }
        }
        Method { name: "getDocumentIds"; type: "QJSValue" }
        Method {
            name: "suggestCompletion"
            Parameter { name: "cursorPosition"; type: "int" }
        }
        Method {
            name: "__documentContentsChanged"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "charsRemoved"; type: "int" }
            Parameter { name: "charsAdded"; type: "int" }
        }
        Method {
            name: "__documentFormatUpdate"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "length"; type: "int" }
        }
        Method {
            name: "__cursorWritePositionChanged"
            Parameter { name: "cursor"; type: "QTextCursor" }
        }
        Method { name: "newProjectScopeReady" }
        Method { name: "updateScope" }
        Method { name: "aboutToDelete" }
        Method {
            name: "nestedObjectsInfo"
            type: "QVariantList"
            Parameter { name: "ef"; type: "lv::QmlEditFragment"; isPointer: true }
        }
        Method {
            name: "getFragmentId"
            type: "QString"
            Parameter { name: "ef"; type: "lv::QmlEditFragment"; isPointer: true }
        }
    }
    Component {
        name: "lv::ProjectQmlExtension"
        prototype: "QObject"
        exports: ["editqml/ProjectQmlExtension 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "createHandler"
            type: "QObject*"
            Parameter { name: "document"; type: "ProjectDocument"; isPointer: true }
            Parameter { name: "handler"; type: "DocumentHandler"; isPointer: true }
        }
    }
    Component {
        name: "lv::QmlAddContainer"
        prototype: "QObject"
        exports: ["editqml/QmlAddContainer 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "model"; type: "lv::QmlSuggestionModel"; isReadonly: true; isPointer: true }
        Property { name: "objectType"; type: "QString"; isReadonly: true }
    }
    Component {
        name: "lv::QmlBindingSpanModel"
        prototype: "QAbstractListModel"
        exports: ["editqml/BindingSpanModel 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "inputPathIndex"; type: "int"; isReadonly: true }
        Signal {
            name: "inputPathIndexChanged"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "commit"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "connectPathAtIndex"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "lv::QmlBuilder"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["editqml/Builder 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "sourceComponent"; type: "QQmlComponent"; isPointer: true }
        Property { name: "source"; type: "QString" }
        Property { name: "object"; type: "QObject"; isReadonly: true; isPointer: true }
        Method { name: "__updateImplicitWidth" }
        Method { name: "__updateImplicitHeight" }
    }
    Component {
        name: "lv::QmlDocumentSyntax"
        prototype: "QObject"
        exports: ["editqml/QmlDocumentSyntax 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "document"; type: "ProjectDocument"; isPointer: true }
        Method {
            name: "findId"
            type: "lv::QmlDocumentSyntaxValue*"
            Parameter { name: "id"; type: "QString" }
        }
        Method {
            name: "objectAroundPosition"
            type: "lv::QmlDocumentSyntaxValue*"
            Parameter { name: "position"; type: "int" }
        }
    }
    Component {
        name: "lv::QmlDocumentSyntaxValue"
        prototype: "QObject"
        exports: ["editqml/QmlDocumentSyntaxValue 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method { name: "begin"; type: "int" }
        Method { name: "end"; type: "int" }
        Method { name: "typeEnd"; type: "int" }
        Method { name: "isObject"; type: "bool" }
        Method { name: "isProperty"; type: "bool" }
    }
    Component {
        name: "lv::QmlEditFragment"
        prototype: "QObject"
        exports: ["editqml/QmlEditFragment 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Location"
            values: {
                "Imports": 0,
                "Object": 1,
                "Component": 2,
                "Property": 3,
                "Slot": 4
            }
        }
        Property { name: "visualParent"; type: "QObject"; isPointer: true }
        Property { name: "refCount"; type: "int"; isReadonly: true }
        Property { name: "location"; type: "Location"; isReadonly: true }
        Property { name: "whenBinding"; type: "QJSValue" }
        Signal {
            name: "connectionChanged"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "aboutToRemovePalette"
            Parameter { name: "palette"; type: "lv::CodePalette"; isPointer: true }
        }
        Signal { name: "aboutToBeRemoved" }
        Signal { name: "paletteListEmpty" }
        Signal {
            name: "objectAdded"
            Parameter { name: "obj"; type: "lv::QmlEditFragment"; isPointer: true }
            Parameter { name: "cursorCoords"; type: "QPointF" }
        }
        Signal {
            name: "propertyAdded"
            Parameter { name: "ef"; type: "lv::QmlEditFragment"; isPointer: true }
            Parameter { name: "expandDefault"; type: "bool" }
        }
        Method { name: "position"; type: "int" }
        Method { name: "valuePosition"; type: "int" }
        Method { name: "valueLength"; type: "int" }
        Method { name: "isBuilder"; type: "bool" }
        Method { name: "rebuild" }
        Method { name: "defaultValue"; type: "QString" }
        Method { name: "totalPalettes"; type: "int" }
        Method { name: "parentFragment"; type: "lv::QmlEditFragment*" }
        Method { name: "bindingPalette"; type: "lv::CodePalette*" }
        Method {
            name: "bindingModel"
            type: "lv::QmlBindingSpanModel*"
            Parameter { name: "codeHandler"; type: "lv::CodeQmlHandler"; isPointer: true }
        }
        Method { name: "type"; type: "QString" }
        Method { name: "typeName"; type: "QString" }
        Method { name: "identifier"; type: "QString" }
        Method { name: "paletteList"; type: "QList<QObject*>" }
        Method { name: "getChildFragments"; type: "QList<QObject*>" }
        Method { name: "updateValue" }
        Method { name: "__inputRunnableObjectReady" }
        Method { name: "nestedObjectsInfo"; type: "QVariantList" }
        Method { name: "objectInfo"; type: "QVariantMap" }
        Method { name: "readValueText"; type: "QString" }
        Method {
            name: "signalPropertyAdded"
            Parameter { name: "ef"; type: "lv::QmlEditFragment"; isPointer: true }
            Parameter { name: "expandDefault"; type: "bool" }
        }
        Method {
            name: "signalPropertyAdded"
            Parameter { name: "ef"; type: "lv::QmlEditFragment"; isPointer: true }
        }
        Method {
            name: "signalObjectAdded"
            Parameter { name: "ef"; type: "lv::QmlEditFragment"; isPointer: true }
            Parameter { name: "p"; type: "QPointF" }
        }
        Method {
            name: "signalObjectAdded"
            Parameter { name: "ef"; type: "lv::QmlEditFragment"; isPointer: true }
        }
        Method { name: "incrementRefCount" }
        Method { name: "decrementRefCount" }
        Method { name: "refCount"; type: "int" }
        Method {
            name: "removeChildFragment"
            Parameter { name: "edit"; type: "QmlEditFragment"; isPointer: true }
        }
        Method {
            name: "setObjectId"
            Parameter { name: "id"; type: "QString" }
        }
        Method { name: "objectId"; type: "QString" }
        Method { name: "location"; type: "Location" }
        Method {
            name: "writeProperties"
            Parameter { name: "properties"; type: "QJSValue" }
        }
        Method {
            name: "write"
            Parameter { name: "options"; type: "QJSValue" }
        }
        Method {
            name: "writeCode"
            Parameter { name: "code"; type: "QString" }
        }
        Method { name: "readObject"; type: "QObject*" }
        Method { name: "parse"; type: "QVariant" }
        Method { name: "updateBindings" }
        Method { name: "updateFromPalette" }
        Method {
            name: "suggestionsForExpression"
            Parameter { name: "expression"; type: "QString" }
            Parameter { name: "model"; type: "lv::CodeCompletionModel"; isPointer: true }
            Parameter { name: "suggestFunctions"; type: "bool" }
        }
        Method {
            name: "bindExpression"
            type: "bool"
            Parameter { name: "expression"; type: "QString" }
        }
        Method {
            name: "bindFunctionExpression"
            type: "bool"
            Parameter { name: "expression"; type: "QString" }
        }
    }
    Component {
        name: "lv::QmlImportsModel"
        prototype: "QAbstractListModel"
        exports: ["editqml/QmlImportsModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "commit"
            Parameter { name: "m"; type: "QString" }
            Parameter { name: "v"; type: "QString" }
            Parameter { name: "q"; type: "QString" }
        }
        Method {
            name: "erase"
            Parameter { name: "pos"; type: "int" }
        }
        Method { name: "firstBlock"; type: "int" }
        Method { name: "lastBlock"; type: "int" }
    }
    Component {
        name: "lv::QmlMetaInfo"
        prototype: "QObject"
        exports: ["editqml/MetaInfo 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "isCppOwned"
            type: "bool"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "isJsOwned"
            type: "bool"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "cppParent"
            type: "QObject*"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "isWritable"
            type: "bool"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "name"; type: "QString" }
        }
    }
    Component {
        name: "lv::QmlPluginInfoExtractor"
        prototype: "QObject"
        exports: ["editqml/PluginInfoExtractor 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "importUri"; type: "QString" }
        Signal {
            name: "pluginInfoReady"
            Parameter { name: "data"; type: "QString" }
        }
        Signal {
            name: "message"
            Parameter { name: "level"; type: "int" }
            Parameter { name: "value"; type: "QString" }
        }
        Method {
            name: "printResult"
            Parameter { name: "data"; type: "QString" }
        }
    }
    Component {
        name: "lv::QmlSuggestionModel"
        prototype: "QAbstractListModel"
        exports: ["editqml/QmlSuggestionModel 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "addPosition"; type: "int"; isReadonly: true }
        Method {
            name: "setFilter"
            Parameter { name: "filter"; type: "QString" }
        }
        Method {
            name: "setImportFilter"
            Parameter { name: "importFilter"; type: "QString" }
        }
        Method {
            name: "setTypeFilter"
            Parameter { name: "typeFilter"; type: "QString" }
        }
        Method {
            name: "setCategoryFilter"
            Parameter { name: "cat"; type: "int" }
        }
        Method { name: "importSpaces"; type: "QStringList" }
        Method { name: "types"; type: "QStringList" }
    }
    Component {
        name: "lv::QmlTokenizer"
        prototype: "QObject"
        exports: ["editqml/Tokenizer 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "tokenKind"; type: "QJSValue"; isReadonly: true }
        Property { name: "tokenState"; type: "QJSValue"; isReadonly: true }
        Method {
            name: "scan"
            type: "QJSValue"
            Parameter { name: "text"; type: "QString" }
        }
    }
    Component {
        name: "lv::QmlWatcher"
        prototype: "QObject"
        exports: ["editqml/Watcher 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "scanner"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "position"; type: "QJSValue" }
        Signal { name: "ready" }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "QJSValue" }
        }
        Method { name: "__workerResultReady" }
    }
}
