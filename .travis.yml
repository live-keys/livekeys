language: cpp

os:
  - osx
  - linux

sudo: required
dist: bionic

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - gcc-7
      - g++-7
      - build-essential
      - cmake
      - cmake-data
      - git
      - libgtk2.0-dev
      - pkg-config
      - libavcodec-dev
      - libavformat-dev
      - libswscale-dev
      - python-dev
      - python-numpy
      - python3
      - python3-pip
      - libtbb2
      - libtbb-dev
      - libjpeg-dev
      - libpng-dev
      - libdc1394-22-dev
      - libgl1-mesa-dev
      - unzip

install:
  - if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
      brew install openssl;
      brew install wget;
      wget --help;
      brew update;
      brew install python3;
      brew install doxygen;
      sudo mkdir /opt/qt;
      sudo chmod 777 /opt/qt;
      sudo ln -s /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild /Applications/Xcode.app/Contents/Developer/usr/bin/xcrun;
      rm -r '/usr/local/lib/python2.7/site-packages/numpy';
      rm '/usr/local/bin/f2py';
      brew install numpy;
      brew search opencv;
      brew info opencv@4;
      brew install opencv@4;
      echo "Open CV environment";
      ls /usr/local/Cellar;
      echo "/usr/local/opt";
      ls /usr/local/opt;
      OPENCV_VERSION="$(ls -1 /usr/local/Cellar/opencv)";
      echo $OPENCV_VERSION;
      export OPENCV_DIR=/usr/local/Cellar/opencv/$OPENCV_VERSION;
      export PKG_CONFIG_PATH=$OPENCV_DIR/lib/pkgconfig;
      echo $OPENCV_DIR;
      echo $PKG_CONFIG_PATH;
      echo $PWD;
      cd build;
      wget https://github.com/livecv/live-pm/archive/master.zip;
      unzip master.zip;
      mv live-pm-master/* .;
      git clone https://github.com/live-keys/live-doc.git;
      cd live-doc;
      npm install;
      cd ..;
      export LIVEDOC=$PWD/live-doc/live-doc.js;
      pip3 install aqtinstall;
      aqt install 5.14.2 --outputdir /opt/qt mac desktop clang_64 -m qtwebengine qtquick3d;
      aqt doc 5.14.2 --outputdir /opt/qt mac desktop -m qtwebengine;
      export QTDIR=/opt/qt/5.14.2/clang_64;
    fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then sudo apt-get install -y libtiff5 libtiff5-dev python3-setuptools doxygen libssl1.0-dev nodejs-dev npm; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then git clone --single-branch -b 4.1.1 https://github.com/opencv/opencv.git; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then cd opencv; mkdir build; cd build; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then cmake -D CMAKE_BUILD_TYPE=RELEASE -D OPENCV_GENERATE_PKGCONFIG=YES -D BUILD_EXAMPLES=OFF -D BUILD_opencv_apps=OFF -D BUILD_DOCS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF ..; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then make -j8; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then sudo make -j8 install; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then export OPENCV_DIR=/usr/local/lib; cd ../../build; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then wget https://github.com/livecv/live-pm/archive/master.zip; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then unzip master.zip; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then mv live-pm-master/* .; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then git clone https://github.com/live-keys/live-doc.git; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then cd live-doc; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then npm install; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then cd ..; export LIVEDOC=$PWD/live-doc/live-doc.js; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then pip3 install aqtinstall --user; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then echo "Installed aqtinstall"; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then aqt install 5.14.2 --outputdir /opt/qt linux desktop gcc_64 -m qtwebengine qtquick3d; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then aqt doc 5.14.2 --outputdir /opt/qt linux desktop -m qtwebengine; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then export QTDIR=/opt/qt/5.14.2/gcc_64; fi

script:
  - ls
  - pip3 install -r requirements.txt --user
  - if [ "${TRAVIS_OS_NAME}" == "osx" ]; then python3 livepm/main.py build .. macos_clang_64; fi
  - if [ "${TRAVIS_OS_NAME}" == "osx" ]; then python3 livepm/main.py deploy .. macos_clang_64; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then python3 livepm/main.py build .. gcc_64; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then python3 livepm/main.py deploy .. gcc_64; fi
  - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then python3 livepm/main.py deploy .. gcc_64_standalone; fi
  - ls

before_deploy:
  - ls *.tar.gz
  - export LIVEKEYS=$(ls live*.tar.gz | tail -n +1 | head -1)
  - echo ${LIVEKEYS}

deploy:
  provider: releases
  api_key:
    secure: YHtw/GdMVgcyNJ0rLnhJX8baIUwK4NuWpOVtPkcP0Zupf+aSy12EgW+AjnJb/JFB9QKJGcXl+OCqwvGCcOmNSBgkPWDtFX54V6nUeJxHobogwJ6g6cOyZSwZvs/8+KaU5dWez45VNMzMAUyD51xEUybTKe4gxi1Fh7yefO9KNTSQpuiLYfY3vrH4Zn1l+2w8+pVlyEJ+oKWJS0zoNdSqRMCptzM04onwyPi0rrrOXpvqftJYxgGlPMlxHYqe96gDBJCI4R99SDF5f65NurHeW/XOECtFLj/WRcXrJW3T5Skb+8Ojqm65ZnYzsx9x2D1l6aCt5Oo6uUxx5Vnv8gN8dy3oRQ27VdNwsK3GHbWpXrijruw+6/6bJkTM1/t3vQk7IZWv+hAexCpunBlrlM7qtfgqHOc1obkecdlqmlZE+o1XqLJCm3fFkciQYVvqdT6Yw/sNJbL09apwO21Ja2KqcTC1n+Q38g6jaYlRW122+wUV+RQ/tunYvW/wWhGN8n3argU4NK4kiIKaBtCAy+QHEzGqA6M148OrieFkHKdswLfPVNj0bVMd+AX/06iuUx8SBDg7KUsaqRVNez+MaTWzK7fHWe5j9sJv6ZK6qNXEPDar6XEKPXHrMSAev7VoAuEFh24IAOhvTUdpLPW4GiVcACtSJaJWA9RdYKAFj0drCps=
  file_glob: true
  file:
    - live*.tar.gz
  skip_cleanup: true
  on:
    tags: true
